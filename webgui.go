package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _static_gui_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x5a\x7b\x73\xdb\x36\x12\xff\xdf\x9f\x02\x41\xae\x25\x35\x12\x49\xf9\x35\xd3\xca\x92\x72\xa9\xeb\x6b\x7d\xed\x35\x69\xec\xdc\x5c\xc7\xe7\xcb\x40\x24\x24\xc1\xa6\x08\x16\x04\xf5\x68\xe2\xef\x7e\xbb\x20\x48\x91\x94\x1c\xbb\x37\x9d\xce\x65\xc6\x12\x01\x2c\x16\x3f\x60\x5f\x3f\x50\x19\xbe\xf8\xf6\xcd\xf9\xf5\x2f\x6f\x2f\xc8\x5c\x2f\xe2\xf1\xc1\x10\xbf\x48\xcc\x92\xd9\x88\xf2\x84\x62\x07\x67\xd1\xf8\x80\x90\xa1\x16\x3a\xe6\xe3\x9f\x73\x16\xde\x73\x75\x07\x9f\x03\xf2\x8b\xcc\xaf\xf3\x09\x27\xe7\x72\xb1\xe0\x89\x26\xaf\x13\x16\x6f\x7e\xe3\x6a\x18\x14\xc2\x07\x38\x6f\xc1\x35\x23\xe1\x9c\xa9\x8c\xeb\x11\xcd\xf5\xd4\xfb\x8a\x8e\xab\x81\xb9\xd6\xa9\xc7\x7f\xcd\xc5\x72\x44\xff\xe5\xbd\x7f\xed\x81\xae\x94\x69\x31\x89\x39\x25\xa1\x4c\x34\xe8\x1d\xd1\xcb\x8b\x11\x8f\x66\xbc\x36\x2f\x61\x0b\x3e\xa2\x4b\xc1\x57\xa9\x54\xba\x26\xba\x12\x91\x9e\x8f\x22\xbe\x14\x21\xf7\x4c\xa3\x47\x44\x22\xb4\x60\xb1\x97\x85\x2c\xe6\xa3\x43\x5a\x00\x8b\x45\x72\x4f\x14\x8f\x47\x34\xd3\x9b\x98\x67\x73\xce\x41\xd1\x5c\xf1\xe9\x88\x22\xac\x6c\x10\x04\x0b\xb6\x0e\xa3\xc4\x9f\x48\xa9\x33\xad\x58\x8a\x8d\x50\x2e\x82\xaa\x23\x38\xf6\x8f\xfd\xa3\x20\xcc\xb2\x6d\x9f\xbf\x10\x20\x95\x65\x05\x5c\xa3\x9c\xe8\x4d\x0a\x78\x35\x5f\xeb\xa0\x1c\x21\xc4\x9f\x88\x59\x92\x2f\x32\xf2\x91\x2c\x98\x9a\x89\xc4\x9b\x48\xad\xe5\x62\x40\x8e\xfa\xe9\xfa\x8c\x4c\x61\x53\x5e\x26\x7e\xe3\x03\x72\x62\x3a\x70\xbe\xc7\x62\x98\x35\x20\x21\x6c\x97\xab\x33\xf2\xd0\x54\x95\xa5\x2c\xf1\x23\x9e\x85\xa0\xb4\x36\xff\xf0\x04\xe7\x47\x22\x4b\x63\xb6\x19\x90\x49\x2c\xc3\xfb\x72\xee\xcb\x58\xb2\x48\x24\x33\x98\x51\x09\x24\x32\xe1\x67\xc4\x9c\xdf\x80\x7c\x75\xfa\xc5\x99\x45\x38\x20\xc7\x80\x84\xb0\x5c\xcb\x06\xbe\xe3\x47\xf1\x85\x32\x96\x6a\x40\x5e\x7e\xfd\xf5\xd7\xd5\x82\x8a\xa3\xd5\x76\xd7\x6b\x0e\xfb\xa9\x92\x33\xc5\xb3\xda\xf9\x68\x99\x96\x6b\x59\x59\xf4\x4f\xae\x40\x62\x02\x2e\x39\x53\x32\x4f\xa2\x72\xcb\xfd\x3e\xc0\xae\x75\xa7\x32\x03\x3f\x90\x35\x6c\x29\x8b\x70\xe3\x03\x72\xba\xd5\xe8\x83\x0d\xe5\x3d\x07\x8d\x25\xf2\xe9\x74\x6a\xb7\x96\xcd\x59\x24\x57\xd0\xd5\xef\xf7\x09\x9e\x03\xfe\x1d\xe1\x5c\x6f\xc5\x27\xf7\x42\x7b\xc5\x91\x2c\xc0\x15\xe6\x46\x31\x4b\xd0\xf3\x04\xcb\x78\x54\x2d\x10\xda\x70\x01\xcc\x52\x01\x78\x80\x0a\x6a\x32\x19\x8b\x88\xbc\x0c\xc3\xf0\xcc\xf6\x7b\x0a\xcc\x92\x67\xb8\x13\x5c\xa2\x02\x5b\x34\x4b\x7b\x94\x30\x0e\x4f\x8b\x87\x9d\x65\xe6\x27\xd5\xf9\xd5\xa4\xfb\xa5\x74\xa5\x76\x77\xc8\xc2\x28\x9d\xb2\x8d\xb2\xb5\x4e\x5a\x7a\xdc\x94\x2d\x44\x0c\x36\x5d\xc8\x44\x82\x3b\x86\xd6\xb0\xc3\xc0\x84\x02\xe4\x94\xa0\x48\x2a\xc3\x89\x8c\x36\x26\x46\x22\xb1\x24\x61\xcc\xb2\x6c\x44\x31\x90\x99\x48\xb8\xb2\x31\x32\x7c\xe1\x79\xe4\x4a\x43\x4a\x08\x21\xe8\x97\x13\xa6\x88\xe7\xd9\x21\x68\x97\xd3\xec\x50\xf1\xe5\x45\x7c\xca\xf2\x58\x5b\x15\x8f\x2c\xe0\x4d\xe3\x5c\x44\x95\x4c\x53\xca\x2a\x2a\xbc\xab\x26\x03\x52\x93\x1c\x8e\x23\xb1\x11\x5d\x34\x68\x6b\x9a\x96\xb3\x19\x04\x3d\x38\x50\xcc\x52\x30\x3d\x25\x11\xd3\xcc\x76\x23\x84\xa2\xbf\xec\x06\xdb\x60\x6e\x7c\x59\xcc\xa6\x84\x29\xc1\x3c\xbe\x86\x48\x8e\x78\x34\xa2\x53\x16\xa3\xac\xe9\x45\xf4\x4a\xc6\xd5\x52\x0d\x68\x98\x6d\x60\x52\x09\x26\x53\x9e\x4c\xe2\x0d\x1d\x5f\x17\x70\x60\x86\x98\x31\x8c\x00\x30\x05\xc8\x7d\x66\xaa\x80\x75\x3c\xa3\xfe\xcf\x12\x1d\x06\xc5\x51\x36\xfa\x58\xeb\x5c\x27\x0a\x8e\xa4\xcc\xd1\x2f\x69\xbd\x1a\x55\x45\xe8\x9d\x49\x1e\xc3\x80\xd5\x0c\x1b\x80\x65\x5b\x76\x16\x51\x75\x84\xad\x45\x4a\xeb\x54\xe6\x6b\x9a\x7f\x2a\xd5\xa2\x35\xc3\x74\xd9\xe7\x98\x4f\xa1\x8a\x80\x89\xc0\xce\x19\x67\x2a\x9c\x53\x02\x15\x6b\x2e\x61\x3d\xb0\x72\xdb\x5e\x35\x97\x43\x2d\x1e\xa6\xaa\xb4\x25\x04\x62\x22\x49\x73\x5d\x2b\x22\xb4\x31\xc9\x3a\x05\x25\x90\x4b\x43\x3e\x97\x31\xf8\xec\x88\xbe\x95\x99\x26\xef\xdf\xfd\x48\xab\x62\x19\xb5\x57\x6f\x9e\xcb\xae\x77\x67\xf9\x64\x21\xb6\x8b\x4d\x74\x42\xe0\x6f\x1b\x5e\xef\xf2\x64\xaf\xdd\x02\x84\xd5\xe8\xc9\xe3\xda\x99\x95\x67\x05\x5f\x6d\x44\x10\xed\xcd\x8e\x58\x94\x13\x59\xa8\xc5\x12\x8c\x01\x5e\x51\x39\xc0\xf7\x72\xc1\xd1\xd4\xc3\x20\x16\xe3\xf6\xc4\x86\xe4\xb5\x82\xa0\x87\x3c\xb7\x5f\xba\x4c\x29\x25\xfe\x3c\x7e\x16\xfa\xf2\x51\x89\xd9\x7c\xc7\xb4\x75\x00\xc8\x27\x80\x4e\xcc\x84\x9e\xe7\x13\xc3\x20\x16\xe2\x9e\x4f\xe3\x4d\x92\x04\xbf\x6e\x9d\x98\x8e\xaf\x64\xae\x42\x4e\xc0\x02\xdf\x09\xfd\x7d\x3e\xd9\x07\xb7\x09\xaf\x30\x22\x1e\x5c\xe0\x03\x9c\xad\xfb\x6e\xf7\x54\x17\x69\xa5\xbf\x6d\x32\x0d\x60\xb2\x21\x46\xb5\x00\xb1\xc4\xa0\xda\xd9\x3b\x5e\x10\x05\x9b\xf2\x33\xdf\xf7\x89\xfb\x0b\xec\x24\xeb\x41\x65\x58\x00\xee\x29\xd1\x73\x0e\x8b\x33\x05\xf1\xa3\xd8\x6f\x9b\x17\x9d\x3d\x39\xb8\x2c\xec\xcd\xc8\xda\x23\x80\xd9\x82\xd4\x1b\x1e\x54\x67\x91\xf2\x88\x58\x6f\xb0\x91\x56\x8a\x6c\xd3\xe7\x92\xc5\x39\x4f\xe4\x6a\x44\x81\x07\xd4\xfb\x80\x9c\x8d\x68\xb3\x87\xad\xad\x94\x29\x50\x96\x43\x16\x04\xa2\x89\xb0\x95\x47\xb6\x4d\xfb\xd8\x3c\xbd\x82\xc6\x34\x8b\x10\xf6\xdb\xa2\x52\xa5\x69\xc3\x37\xea\x75\x68\x7e\x68\xe4\x20\x60\xb9\xfc\x60\xa8\x34\x66\xcc\xf9\x61\x5d\xe4\xa4\x01\xcc\x64\x59\x9c\x03\x44\x3b\x49\x78\xbc\x9d\x65\xf2\x2c\xfa\xd3\x56\x26\xe1\x7a\x25\xd5\x7d\x4b\xa6\xb6\x2d\x54\x5e\x5b\x4a\x91\xa0\xde\xae\x99\x49\xc9\x15\xb1\xc4\xf3\x51\x53\x82\x3f\x7a\xeb\xcc\x3b\x21\xf6\x41\x4e\xa7\x70\x13\xf0\x4e\xf6\x56\x2e\x84\xa7\xa5\x66\xf1\x87\xd2\xc5\xe8\xb8\xff\x64\x5d\x41\xba\x8b\x55\x0e\xe6\x95\x65\x20\xdb\x57\x61\x5a\xd9\x6e\x1f\xca\x47\x51\x95\x78\x3e\xa4\x5c\x7d\x88\xd8\xe6\xf9\xb8\x4a\x44\xe4\x2d\xf0\xd4\x6f\xd9\xe6\x49\x64\x8d\x66\xdd\xb3\x9e\x0c\xa2\x67\x86\x50\x1e\x86\x38\xef\x19\xb1\xf3\x3f\x46\x0e\x10\xef\xc6\x41\x56\x47\x60\x6f\x88\x11\x8a\xfc\xde\xfd\x82\xb3\x3d\xb2\x55\x34\xde\x22\xf2\x8e\x9b\x3e\x38\x3f\x05\x97\x48\xc9\x0f\x7c\x03\xde\x1e\x81\x43\x40\x47\x7d\x5c\x33\xb8\x64\x1a\xdb\xde\x5b\x91\x2a\x24\x8b\x21\xf3\x59\x26\x9c\x56\x22\x30\x63\x3b\x26\xfb\x1c\xba\xd3\x1d\x74\x25\x63\xb9\x0a\x25\x9c\xff\x0e\xbe\x90\x25\x4b\x96\x19\x80\x8b\xcd\x39\x5c\xa0\xa1\x10\x17\xb7\x5b\x6a\x32\x13\x99\x73\x2c\x3b\x23\x7a\x0c\x06\x80\x28\x2e\xe4\x7f\x17\xa6\x93\x1d\x4c\x17\x6b\xb6\x48\x63\x5e\x0b\xa3\x16\xaa\x32\x89\x65\x28\x67\x6a\xc3\x33\xbc\xb7\xf1\xb8\xc5\x35\xcc\x42\x38\x5b\x4d\x32\x15\x6e\xaf\xdc\xec\x8e\xad\xfd\x99\x94\xc0\x58\x59\x2a\x32\x53\x2c\xb1\x0f\x8a\xe0\x24\x0b\xee\x7e\xcd\xb9\xda\x04\x47\xfe\xa1\x7f\x6c\x1b\xe6\xba\x7d\x97\x99\x44\x66\xf4\x8d\x1f\x53\xfd\xdc\xdb\xfc\x5d\xfb\x32\xff\x2c\xed\xa0\xed\x0e\xe0\xc6\x32\x8f\xa6\x31\xd4\xbf\x16\x72\x63\x41\xd0\x14\x1c\xfa\x7d\xff\xd0\x36\x77\x95\xd7\xb4\xd7\xde\x19\xdc\x31\x30\xad\xe9\x35\x16\x9b\xe6\x49\x88\x3c\x9e\x00\xa3\x04\x86\xf7\x96\x29\x60\x78\x70\xa3\x75\x91\xe9\x75\xc8\x47\x73\xe0\x8a\xeb\x5c\x25\x24\xe2\xa1\x8c\xf8\xfb\x77\x97\xf8\x66\x05\x6e\xd9\x89\x76\xdd\x84\xaf\xa0\x96\xcf\x2e\xd6\xa9\xeb\xdc\xbc\xfa\xf4\xe5\xad\x43\xba\x86\x25\xc2\x97\x33\xc2\x86\xe3\xde\xfc\xe7\xcb\xb3\xdb\xee\xab\x8e\xfb\xe5\xa7\x97\x9f\xce\x3e\xfd\xa5\xe3\x74\x7c\xbe\xe6\xa1\x1b\xcb\xd0\x5c\x22\xfc\x82\xde\x76\x3e\x7d\xba\xe9\x51\x7a\xdb\xb9\x39\xbc\xf5\xa1\xe4\x21\x05\x75\x83\x7f\x77\x83\x59\x8f\x38\x5f\x1c\xf5\x9d\x0e\x48\x24\x79\x1c\x03\xa8\x87\x83\x3a\xf8\x68\xe9\xe2\xfd\xa7\x47\x2c\x9f\xfc\x16\x1a\x2d\xf0\x46\x80\xbc\x32\xf7\x24\x32\x68\x08\x9e\xed\xe8\xd3\x0a\x9e\x98\xe6\x2e\x18\xae\x07\x37\xde\x75\xa9\x4c\x4c\xb1\xcb\x8f\x79\x32\xd3\x73\x32\xae\x0f\x11\xc8\x5c\x8a\x8c\xf0\xd3\x07\xb6\x8b\xc1\x9e\xcc\xdc\xbe\x9d\xde\x25\x14\x28\x0e\x3d\x33\xa2\x0f\x07\x75\x64\x20\xb9\x8b\x20\xcf\xb8\xfa\x51\x24\xf7\x2e\x3e\xe0\x79\xf6\x8c\x11\x6b\x38\xb0\x49\x46\x23\xe2\xd8\x77\x67\xff\xc4\x1a\xef\x6c\xd1\x58\xed\x25\x61\xdc\xc8\x5c\x83\x94\x71\x25\xd4\x19\x50\xc0\x54\x2a\xb7\xb0\x08\x87\xeb\x61\x43\xf7\x65\x92\x69\x36\x03\x9f\x78\x2b\xc2\xc7\x75\x8b\x52\xca\x68\xdf\xa3\xb8\xb1\x5f\xe0\xd0\xbb\xfb\x8d\x14\x5b\x15\xf7\x2d\xf7\x2e\x93\x49\xb9\x14\x70\xcc\x0c\x4a\x8b\x1f\xcb\x59\xd1\x5f\x28\xbc\xfb\x19\xc3\xd5\x35\x1c\xda\x5c\x68\x68\xc7\x87\x32\x62\x44\x7c\x70\xe3\x96\x98\x7d\x0d\x04\x42\xd9\x5c\xae\x5c\x3b\x2a\xa6\xa4\x98\x70\xfd\xc4\x49\x56\x6a\xea\x34\xaa\xe3\x63\x38\xb9\x95\xa7\xec\x09\x0e\xa3\xfc\x1f\x5c\x33\xf4\x39\xff\x1a\xa7\x75\x7a\xe4\xb4\xdf\xb1\x00\x6a\x9a\x9b\x64\xcb\xea\x7e\x52\xe5\x79\x31\xab\xd0\xbc\xab\xb4\xc9\xce\xac\x52\x6a\x37\x49\x77\xe5\x5b\x74\xe9\xb9\x28\x0c\x5b\x2a\xb3\xfc\x1e\x18\x96\xa4\x76\xf0\x45\xa6\xfb\xb1\xca\xee\xb4\xf6\x3e\x4d\x2c\xd8\x8c\xd3\x01\xa1\xb9\x8a\x5d\x87\x76\x9f\x5e\x73\x9e\x2f\x26\x09\x13\x71\xa7\x4b\x9d\x0e\xb5\x4a\x1f\x3a\x2d\x47\x6e\x1b\xf8\x11\x77\xfe\x63\x0c\x7c\xce\x52\x74\xe5\x3f\xd6\xc4\xef\x21\x90\x7e\xc2\x54\xfc\x5c\xf3\x56\x5b\xfc\xf3\x0c\x5c\x9c\x1a\xbe\x41\xff\x9d\x3a\x7f\xc4\xfb\xde\xff\x87\xc7\x1c\x34\x13\xc6\x0e\x47\xb7\xfb\x32\x3a\xed\x51\xbc\x5e\xce\x80\x87\x03\x0d\xf7\xb5\xfc\x9b\x58\xf3\xc8\x3d\xea\xb4\x12\x8f\x5f\x67\xcb\xa0\x83\x69\xad\x5c\xa7\xc1\x8c\x9d\x1e\xa9\x2b\x3d\x97\x4b\xae\x60\x6b\xa0\x19\x5f\x2d\x77\x5a\xaf\x6f\x1a\xff\x8a\xe3\x71\x0c\x93\x73\x06\x9f\x53\xd3\x75\xbe\x70\x1e\x3e\xaf\xcb\x6c\xcf\xd9\x43\xaf\x9d\xee\x13\x8a\x61\xcf\x46\xf3\x54\x2a\xe2\x2e\xe1\x8a\xb0\x86\x9c\x5c\xa0\x29\x19\xf3\x36\xd4\x70\x7c\x03\x55\x32\xc5\x5f\x71\x2e\xc1\x4a\xa6\x36\x1e\xee\xb8\x40\x45\xa4\xe1\xd0\xd2\x94\x27\x91\xeb\x0c\xb5\x1a\x0f\x75\x34\x76\xba\x9b\xae\xe3\x03\x71\x8e\x6c\xb3\xb1\xd4\xcd\xfa\xb6\xeb\x14\x83\x01\x4c\x70\x5a\x06\x46\xd1\x2b\x43\x4c\xcb\xad\xfa\x80\xfb\x82\x85\x73\xb7\xac\x45\xee\xb2\x47\x44\x8f\xb0\x3d\xf9\xa1\xa2\xaa\x35\x54\x0d\x2e\x6c\x54\x02\x09\x83\x7b\x6f\xf5\xc6\xc6\xe9\x56\xc5\x7c\xe9\xbf\xce\xf5\x5c\x9a\x88\xb6\x76\xc7\xdc\xd4\xe9\x3a\x74\xfc\x57\xa7\x5b\x1f\xc6\x4d\xe0\x0b\x1b\xd4\x94\x8e\x71\xec\xbc\xf8\x61\x0a\x07\x52\x4b\x95\x9d\xc2\xa6\x0f\xa5\x09\xf0\x74\xa3\x14\x8e\xf7\xe3\xc3\xd9\x63\x36\xb9\x02\x1d\x02\x61\x36\x8d\x92\xc0\xac\xe6\x38\x9c\xe4\x0d\x45\x28\xf4\xf6\xac\x26\x98\xee\x17\xb4\x0e\x81\xb2\x56\x38\x4a\x6f\x92\x5b\x34\x75\xc3\x02\x06\x22\x72\xb0\x51\xb5\x7c\xcc\x26\x90\xaf\x07\xe4\x86\x5e\x73\xa5\xf0\x07\xbb\x17\xb4\x47\xe8\x55\x1e\xde\x67\xf8\xf0\x0d\x8b\xf0\xeb\x27\xa9\xc9\x77\x52\x9a\xe7\x8b\xb9\xe9\xe1\x39\x10\xeb\x18\x1f\xdf\xfc\x80\x9f\xe5\x30\x26\x16\x72\xa9\xcd\x23\x38\x6c\x64\x9f\x5f\xaf\x38\xbe\x5b\x7a\x41\x6f\x7b\x25\x46\x40\x92\x71\x8d\x8b\x57\xd1\xf1\xb1\x16\x27\x06\x1a\x64\x99\x72\x77\xbd\xda\x18\xce\x85\x79\xc8\x3d\xd3\x1b\x0a\xb7\xb2\xdb\x1e\xe9\x43\xf6\x2f\x3b\x4e\xda\x1d\xc7\xed\x8e\xa3\x76\xc7\x61\xab\xa3\xdf\x6a\xb7\xc7\xdb\x0a\xda\x2b\xb4\x21\x58\x8c\xb7\xd5\x2e\x1e\xec\xd3\xed\xc1\xb6\x85\x16\x0a\xf5\x1a\x0c\x14\xc9\x30\x47\x03\xfb\x70\x39\xb8\x88\x39\x3e\x7e\xb3\xb9\x8c\xdc\xea\x16\xd9\xc1\x11\xe3\x97\x58\x7a\x8e\xa2\xb2\xe6\xa0\x8a\xc5\xe6\x1b\xa6\x8c\x18\x68\xc2\x6b\x82\x79\x76\x41\x73\xc7\x87\x11\x4b\xd8\x3f\x9a\x5f\x52\xaf\x80\x96\x7d\xa7\x44\x04\x41\xc2\xc1\x16\xe6\x67\x8a\x1e\xf0\xc5\x0c\x52\x79\x26\x96\x7c\x80\x8c\x9c\x23\x95\x16\xe6\x9d\xe3\xeb\x2c\xe5\xa1\x7e\x87\x97\x07\x2b\xfd\xb0\x65\xf1\x2b\x91\x44\x72\xe5\xcb\x04\xdf\x39\xc2\xda\x55\x5c\x97\x0e\x8f\xe8\xa0\x66\xc1\x50\xfb\xd2\xe3\x40\xb7\x53\xdb\x03\xfa\xf9\x95\x61\xf5\x3b\x92\x38\xe4\x54\x4c\xd2\x85\x89\xbb\xf9\xc2\xbc\xcd\xaf\xf3\x53\x94\x2a\x63\xa9\x3d\xa9\x96\x66\xca\x97\xa5\x1d\x7f\x0a\x85\xf0\x32\x71\x4f\xfb\xfd\x6a\x5e\x29\x87\x47\xff\xf7\xab\x37\x3f\xb9\x34\x80\xdb\xed\xab\x25\x5e\xa5\xbb\xf0\xd9\xdb\x6e\x18\x0f\xb0\xd3\xf0\x67\x58\xf4\x05\xf6\xfa\x10\x68\x52\x35\xc7\x1e\x05\xf0\x26\xd7\x88\xa0\xb7\x7b\x92\xb5\x60\xd8\xf2\x77\xb3\xea\x59\x63\xfc\xa1\xd1\x7e\x38\xd8\xed\x7f\x68\xdd\x40\xec\xc9\x37\x73\x14\x76\xbe\x99\xdc\x81\x39\x70\xe3\xbe\xa9\x21\x95\x64\xed\x5c\xad\x5c\x1d\x65\xeb\x7e\x81\xa3\xed\x03\x35\xd7\x09\xd8\xf2\x1c\xe8\x8c\xdb\x06\x76\x40\xca\x5f\x1e\xed\xed\x7a\x18\x14\xbf\x39\x42\x86\xc6\xff\xef\xf0\xdf\x00\x00\x00\xff\xff\x1e\x31\x28\x51\xff\x20\x00\x00")

func static_gui_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_static_gui_index_html,
		"static/gui/index.html",
	)
}

func static_gui_index_html() (*asset, error) {
	bytes, err := static_gui_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "static/gui/index.html", size: 8447, mode: os.FileMode(420), modTime: time.Unix(1429219362, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/gui/index.html": static_gui_index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"static": &_bintree_t{nil, map[string]*_bintree_t{
		"gui": &_bintree_t{nil, map[string]*_bintree_t{
			"index.html": &_bintree_t{static_gui_index_html, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

