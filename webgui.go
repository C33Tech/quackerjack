package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _static_gui_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x5a\x7b\x73\xdb\x36\x12\xff\xdf\x9f\x02\x41\xae\x25\x35\x12\x49\xf9\x35\xd3\xca\x92\x72\xa9\xeb\x6b\x7d\xed\x35\x69\xec\xdc\x5c\xc7\xe7\xcb\x40\x24\x24\xc1\xa6\x08\x16\x04\xf5\x68\xe2\xef\x7e\xbb\x20\x48\x91\x94\x1c\xbb\x37\x9d\xce\x65\xc6\x12\x01\xec\x2e\x7e\xd8\x37\xa8\x0c\x5f\x7c\xfb\xe6\xfc\xfa\x97\xb7\x17\x64\xae\x17\xf1\xf8\x60\x88\x5f\x24\x66\xc9\x6c\x44\x79\x42\x71\x82\xb3\x68\x7c\x40\xc8\x50\x0b\x1d\xf3\xf1\xcf\x39\x0b\xef\xb9\xba\x83\xcf\x01\xf9\x45\xe6\xd7\xf9\x84\x93\x73\xb9\x58\xf0\x44\x93\xd7\x09\x8b\x37\xbf\x71\x35\x0c\x0a\xe2\x03\xe4\x5b\x70\xcd\x48\x38\x67\x2a\xe3\x7a\x44\x73\x3d\xf5\xbe\xa2\xe3\x6a\x61\xae\x75\xea\xf1\x5f\x73\xb1\x1c\xd1\x7f\x79\xef\x5f\x7b\x20\x2b\x65\x5a\x4c\x62\x4e\x49\x28\x13\x0d\x72\x47\xf4\xf2\x62\xc4\xa3\x19\xaf\xf1\x25\x6c\xc1\x47\x74\x29\xf8\x2a\x95\x4a\xd7\x48\x57\x22\xd2\xf3\x51\xc4\x97\x22\xe4\x9e\x19\xf4\x88\x48\x84\x16\x2c\xf6\xb2\x90\xc5\x7c\x74\x48\x0b\x60\xb1\x48\xee\x89\xe2\xf1\x88\x66\x7a\x13\xf3\x6c\xce\x39\x08\x9a\x2b\x3e\x1d\x51\x84\x95\x0d\x82\x60\xc1\xd6\x61\x94\xf8\x13\x29\x75\xa6\x15\x4b\x71\x10\xca\x45\x50\x4d\x04\xc7\xfe\xb1\x7f\x14\x84\x59\xb6\x9d\xf3\x17\x02\xa8\xb2\xac\x80\x6b\x84\x13\xbd\x49\x01\xaf\xe6\x6b\x1d\x94\x2b\x84\xf8\x13\x31\x4b\xf2\x45\x46\x3e\x92\x05\x53\x33\x91\x78\x13\xa9\xb5\x5c\x0c\xc8\x51\x3f\x5d\x9f\x91\x29\x1c\xca\xcb\xc4\x6f\x7c\x40\x4e\xcc\x04\xf2\x7b\x2c\x06\xae\x01\x09\xe1\xb8\x5c\x9d\x91\x87\xa6\xa8\x2c\x65\x89\x1f\xf1\x2c\x04\xa1\x35\xfe\xc3\x13\xe4\x8f\x44\x96\xc6\x6c\x33\x20\x93\x58\x86\xf7\x25\xef\xcb\x58\xb2\x48\x24\x33\xe0\xa8\x08\x12\x99\xf0\x33\x62\xf4\x37\x20\x5f\x9d\x7e\x71\x66\x11\x0e\xc8\x31\x20\x21\x2c\xd7\xb2\x81\xef\xf8\x51\x7c\xa1\x8c\xa5\x1a\x90\x97\x5f\x7f\xfd\x75\xb5\xa1\xe2\x68\xb5\xdd\xfd\x9a\xcb\x7e\xaa\xe4\x4c\xf1\xac\xa6\x1f\x2d\xd3\x72\x2f\x4b\x8b\xfe\xc9\x15\x50\x4c\xc0\x25\x67\x4a\xe6\x49\x54\x1e\xb9\xdf\x07\xd8\xb5\xe9\x54\x66\xe0\x07\xb2\x86\x2d\x65\x11\x1e\x7c\x40\x4e\xb7\x12\x7d\xb0\xa1\xbc\xe7\x20\xb1\x44\x3e\x9d\x4e\xed\xd1\xb2\x39\x8b\xe4\x0a\xa6\xfa\xfd\x3e\x41\x3d\xe0\x9f\xe1\xf5\x56\x7c\x72\x2f\xb4\x57\xa8\x64\x01\xae\x30\x37\x82\x59\x82\x9e\x27\x58\xc6\xa3\x6a\x83\xd0\x86\x0b\x60\x96\x0a\xc0\x03\x54\x10\x93\xc9\x58\x44\xe4\x65\x18\x86\x67\x76\xde\x53\x60\x96\x3c\xc3\x93\xe0\x16\x15\xd8\x62\x58\xda\xa3\x84\x71\x78\x5a\x3c\xec\x6c\x33\x3f\xa9\xf4\x57\xa3\xee\x97\xd4\x95\xd8\xdd\x25\x0b\xa3\x74\xca\x36\xca\xd6\x3e\x69\xe9\x71\x53\xb6\x10\x31\xd8\x74\x21\x13\x09\xee\x18\x5a\xc3\x0e\x03\x13\x0a\x90\x53\x82\x22\xa9\x0c\x27\x32\xda\x98\x18\x89\xc4\x92\x84\x31\xcb\xb2\x11\xc5\x40\x66\x22\xe1\xca\xc6\xc8\xf0\x85\xe7\x91\x2b\x0d\x29\x21\x84\xa0\x5f\x4e\x98\x22\x9e\x67\x97\x60\x5c\xb2\xd9\xa5\xe2\xcb\x8b\xf8\x94\xe5\xb1\xb6\x22\x1e\xd9\xc0\x9b\xc6\xb9\x88\x2a\x9a\x26\x95\x15\x54\x78\x57\x8d\x06\xa8\x26\x39\xa8\x23\xb1\x11\x5d\x0c\x68\x8b\x4d\xcb\xd9\x0c\x82\x1e\x1c\x28\x66\x29\x98\x9e\x92\x88\x69\x66\xa7\x11\x42\x31\x5f\x4e\x83\x6d\x30\x37\xbe\x2c\xb8\x29\x61\x4a\x30\x8f\xaf\x21\x92\x23\x1e\x8d\xe8\x94\xc5\x48\x6b\x66\x11\xbd\x92\x71\xb5\x55\x03\x1a\x66\x1b\x60\x2a\xc1\x64\xca\x93\x49\xbc\xa1\xe3\xeb\x02\x0e\x70\x88\x19\xc3\x08\x00\x53\x00\xdd\x67\x58\x05\xec\xe3\x19\xf1\x7f\x16\xe9\x30\x28\x54\xd9\x98\x63\x2d\xbd\x4e\x14\xa8\xa4\xcc\xd1\x2f\x69\xbd\x1a\x55\x45\xe8\x9d\x49\x1e\xc3\x80\xd5\x0c\x1b\x80\x65\x5b\x76\x16\x51\xa5\xc2\xd6\x26\xa5\x75\x2a\xf3\x35\xcd\x3f\x95\x6a\xd1\xe2\x30\x53\xf6\x39\xe6\x53\xa8\x22\x60\x22\xb0\x73\xc6\x99\x0a\xe7\x94\x40\xc5\x9a\x4b\xd8\x0f\xac\xdc\xb6\x57\xcd\xe5\x50\x8a\x87\xa9\x2a\x6d\x11\x01\x99\x48\xd2\x5c\xd7\x8a\x08\x6d\x30\x59\xa7\xa0\x04\x72\x69\xc8\xe7\x32\x06\x9f\x1d\xd1\xb7\x32\xd3\xe4\xfd\xbb\x1f\x69\x55\x2c\xa3\xf6\xee\x4d\xbd\xec\x7a\x77\x96\x4f\x16\x62\xbb\xd9\x44\x27\x04\xfe\xb6\xe1\xf5\x2e\x4f\xf6\xda\x2d\x40\x58\x8d\x99\x3c\xae\xe9\xac\xd4\x15\x7c\xb5\x11\x41\xb4\x37\x27\x62\x51\x32\xb2\x50\x8b\x25\x18\x03\xbc\xa2\x72\x80\xef\xe5\x82\xa3\xa9\x87\x41\x2c\xc6\x6d\xc6\x06\xe5\xb5\x82\xa0\x87\x3c\xb7\x9f\xba\x4c\x29\x25\xfe\x3c\x7e\x16\xfa\xf2\x51\x89\xd9\x7c\xc7\xb4\x75\x00\xd8\x4f\x40\x3b\x31\x13\x7a\x9e\x4f\x4c\x07\xb1\x10\xf7\x7c\x1a\x6f\x92\x24\xf8\x75\xeb\xc4\x74\x7c\x25\x73\x15\x72\x02\x16\xf8\x4e\xe8\xef\xf3\xc9\x3e\xb8\x4d\x78\x85\x11\x51\x71\x81\x0f\x70\xb6\xee\xbb\x3d\x53\x9d\xa4\x95\xfe\xb6\xc9\x34\x00\x66\xd3\x18\xd5\x02\xc4\x36\x06\xd5\xc9\xde\xf1\xa2\x51\xb0\x29\x3f\xf3\x7d\x9f\xb8\xbf\xc0\x49\xb2\x1e\x54\x86\x05\xe0\x9e\x12\x3d\xe7\xb0\x39\x53\x10\x3f\x8a\xfd\xb6\x79\xd1\xd9\x93\x83\xcb\xc2\xde\x8c\xac\x3d\x04\x98\x2d\x48\x7d\xe0\x41\x75\x16\x29\x8f\x88\xf5\x06\x1b\x69\x25\xc9\x36\x7d\x2e\x59\x9c\xf3\x44\xae\x46\x14\xfa\x80\xfa\x1c\x34\x67\x23\xda\x9c\x61\x6b\x4b\x65\x0a\x94\xed\x21\x8b\x06\xa2\x89\xb0\x95\x47\xb6\x43\xfb\xd8\xd4\x5e\xd1\xc6\x34\x8b\x10\xce\xdb\xa2\x52\xa5\x69\xd3\x6f\xd4\xeb\xd0\xfc\xd0\xd0\x41\xc0\x72\xf9\xc1\xb4\xd2\x98\x31\xe7\x87\x75\x92\x93\x06\x30\x93\x65\x91\x07\x1a\xed\x24\xe1\xf1\x96\xcb\xe4\x59\xf4\xa7\x2d\x4d\xc2\xf5\x4a\xaa\xfb\x16\x4d\xed\x58\x28\xbc\xb6\x95\x22\x41\x7d\x5c\x33\x93\x92\x2b\x62\x1b\xcf\x47\x4d\x09\xfe\xe8\xad\x33\xef\x84\xd8\x07\x39\x9d\xc2\x4d\xc0\x3b\xd9\x5b\xb9\x10\x9e\x96\x9a\xc5\x1f\x4a\x17\xa3\xe3\xfe\x93\x75\x05\xdb\x5d\xac\x72\xc0\x57\x96\x81\x6c\x5f\x85\x69\x65\xbb\x7d\x28\x1f\x45\x55\xe2\xf9\x90\x72\xf5\x21\x62\x9b\xe7\xe3\x2a\x11\x91\xb7\xd0\xa7\x7e\xcb\x36\x4f\x22\x6b\x0c\xeb\x9e\xf5\x64\x10\x3d\x33\x84\xf2\x30\x44\xbe\x67\xc4\xce\xff\x18\x39\xd0\x78\x37\x14\x59\xa9\xc0\xde\x10\x23\x24\xf9\xbd\xe7\x05\x67\x7b\xe4\xa8\x68\xbc\x45\xe4\x1d\x37\x7d\x70\x7e\x0a\x2e\x91\x92\x1f\xf8\x06\xbc\x3d\x02\x87\x80\x89\xfa\xba\x66\x70\xc9\x34\xb6\xbd\xb7\x24\x55\x48\x16\x4b\xe6\xb3\x4c\x38\xad\x44\x60\xd6\x76\x4c\xf6\x39\x74\xa7\x3b\xe8\xca\x8e\xe5\x2a\x94\xa0\xff\x1d\x7c\x21\x4b\x96\x2c\x33\x00\x17\x9b\x73\xb8\x40\x43\x21\x2e\x6e\xb7\xd4\x64\x26\x32\xe7\x58\x76\x46\xf4\x18\x0c\x00\x51\x5c\xd0\xff\x2e\x4c\x27\x3b\x98\x2e\xd6\x6c\x91\xc6\xbc\x16\x46\x2d\x54\x65\x12\xcb\x90\xce\xd4\x86\x67\x78\x6f\xe3\x71\x8b\x6b\x98\x85\xa0\x5b\x4d\x32\x15\x6e\xaf\xdc\xec\x8e\xad\xfd\x99\x94\xd0\xb1\xb2\x54\x64\xa6\x58\xe2\x1c\x14\xc1\x49\x16\xdc\xfd\x9a\x73\xb5\x09\x8e\xfc\x43\xff\xd8\x0e\xcc\x75\xfb\x2e\x33\x89\xcc\xc8\x1b\x3f\x26\xfa\xb9\xb7\xf9\xbb\xf6\x65\xfe\x59\xd2\x41\xda\x1d\xc0\x8d\x65\x1e\x4d\x63\xa8\x7f\x2d\xe4\xc6\x82\x20\x29\x38\xf4\xfb\xfe\xa1\x1d\xee\x0a\xaf\x49\xaf\xbd\x33\xb8\x63\x60\x5a\x33\x6b\x2c\x36\xcd\x93\x10\xfb\x78\x02\x1d\x25\x74\x78\x6f\x99\x82\x0e\x0f\x6e\xb4\x2e\x76\x7a\x1d\xf2\xd1\x28\x5c\x71\x9d\xab\x84\x44\x3c\x94\x11\x7f\xff\xee\x12\xdf\xac\xc0\x2d\x3b\xd1\xae\x9b\xf0\x15\xd4\xf2\xd9\xc5\x3a\x75\x9d\x9b\x57\x9f\xbe\xbc\x75\x48\xd7\x74\x89\xf0\xe5\x8c\x70\xe0\xb8\x37\xff\xf9\xf2\xec\xb6\xfb\xaa\xe3\x7e\xf9\xe9\xe5\xa7\xb3\x4f\x7f\xe9\x38\x1d\x9f\xaf\x79\xe8\xc6\x32\x34\x97\x08\xbf\x68\x6f\x3b\x9f\x3e\xdd\xf4\x28\xbd\xed\xdc\x1c\xde\xfa\x50\xf2\xb0\x05\x75\x83\x7f\x77\x83\x59\x8f\x38\x5f\x1c\xf5\x9d\x0e\x50\x24\x79\x1c\x03\xa8\x87\x83\x3a\xf8\x68\xe9\xe2\xfd\xa7\x47\x6c\x3f\xf9\x2d\x0c\x5a\xe0\x0d\x01\x79\x65\xee\x49\x64\xd0\x20\x3c\xdb\x91\xa7\x15\x3c\x31\xcd\x5d\x30\x5c\x0f\x6e\xbc\xeb\x52\x98\x98\xe2\x94\x1f\xf3\x64\xa6\xe7\x64\x5c\x5f\x22\x90\xb9\x14\x19\xe1\xa7\x0f\xdd\x2e\x06\x7b\x32\x73\xfb\x96\xbd\x4b\x28\xb4\x38\xf4\xcc\x90\x3e\x1c\xd4\x91\x01\xe5\x2e\x82\x3c\xe3\xea\x47\x91\xdc\xbb\xf8\x80\xfa\xec\x19\x23\xd6\x70\xe0\x90\x8c\x46\xc4\xb1\xef\xce\xfe\x89\x35\xde\xd9\xa2\xb1\xd2\xcb\x86\x71\x23\x73\x0d\x54\xc6\x95\x50\x66\x40\x01\x53\x29\xdc\xc2\x22\x1c\xae\x87\x0d\xd9\x97\x49\xa6\xd9\x0c\x7c\xe2\xad\x08\x1f\x97\x2d\x4a\x2a\x23\x7d\x8f\xe0\xc6\x79\xa1\x87\xde\x3d\x6f\xa4\xd8\xaa\xb8\x6f\xb9\x77\x99\x4c\xca\xad\xee\x7e\xc6\xb8\x74\x4d\xb3\x6c\x6e\x2e\xb4\xe3\x43\xbd\x30\x34\x3e\xf8\x6b\xe7\xac\x41\x66\xdf\xf7\x00\x51\x36\x97\x2b\xd7\xae\x8a\x29\x29\x18\xae\x9f\x50\x59\x25\xa6\xde\x2f\x75\x7c\x8c\x1b\xb7\x72\x89\x3d\x51\x60\x84\xff\x83\x6b\x86\xce\xe5\x5f\x23\x5b\xa7\x47\x4e\xfb\x1d\x0b\xa0\x26\xb9\xd9\x55\x59\xd9\x4f\x8a\x3c\x2f\xb8\x0a\xc9\xbb\x42\x9b\x6d\x98\x15\x4a\xed\x21\xe9\x2e\x7d\xab\x2f\x7a\x2e\x0a\xd3\x16\x95\xe9\x7c\x0f\x0c\xdb\x8d\x76\xf0\x8d\xa5\xfb\xb1\x4a\xe3\xb4\xf6\xe2\x4c\x2c\xd8\x8c\xd3\x01\xa1\xb9\x8a\x5d\x87\x76\x9f\xde\x73\x9e\x2f\x26\x09\x13\x71\xa7\x4b\x9d\x0e\xb5\x42\x1f\x3a\x2d\x8f\x6d\x1b\xf8\x11\xbf\xfd\x63\x0c\x7c\xce\x52\xf4\xd9\x3f\xd6\xc4\xef\x21\x62\x7e\xc2\x9c\xfb\x5c\xf3\x56\x47\xfc\xf3\x0c\x5c\x68\x0d\x5f\x95\xff\x4e\x99\x3f\xe2\xc5\xee\xff\xc3\x63\x0e\x9a\x09\x63\xa7\x19\xb7\xe7\x32\x32\xad\x2a\x5e\x2f\x67\xd0\x70\x43\xbf\xed\x6b\xf9\x37\xb1\xe6\x91\x7b\xd4\x69\x25\x1e\xbf\xde\x16\x83\x0c\xa6\xb5\x72\x9d\x46\x0b\xec\xf4\x48\x5d\xe8\xb9\x5c\x72\x05\x47\x03\xc9\xf8\x0e\xb9\xd3\x7a\x4f\xd3\xf8\x57\xa8\xc7\x31\x2d\x9b\x33\xf8\x9c\x98\xae\xf3\x85\xf3\xf0\x79\x59\xe6\x78\xce\x9e\x3e\xda\xe9\x3e\x21\x18\xce\x6c\x24\x4f\xa5\x22\xee\x12\xee\x02\x6b\xc8\xc9\x05\x9a\xb2\x35\xde\x86\x1a\xae\x6f\xa0\x1c\xa6\xf8\x73\xcd\x25\x58\xc9\x14\xc1\xc3\x1d\x17\xa8\x3a\x66\x50\x5a\x9a\xf2\x24\x72\x9d\xa1\x56\xe3\xa1\x8e\xc6\x4e\x77\xd3\x75\x7c\xe8\x90\x23\x3b\x6c\x6c\x75\xb3\xbe\xed\x3a\xc5\x62\x00\x0c\x4e\xcb\xc0\x48\x7a\x65\x3a\xd0\xf2\xa8\x3e\xe0\xbe\x60\xe1\xdc\x2d\x8b\x8e\xbb\xec\x11\xd1\x23\x6c\x4f\x7e\xa8\x7a\xd2\x1a\xaa\x46\xd3\x6b\x44\x42\xb7\x05\x17\xdc\xea\xd5\x8c\xd3\xad\xaa\xf6\xd2\x7f\x9d\xeb\xb9\x34\x11\x6d\xed\x8e\xb9\xa9\xd3\x75\xe8\xf8\xaf\x4e\xb7\xbe\x8c\x87\xc0\x37\x33\x28\x29\x1d\xe3\xda\x79\xf1\x0b\x14\x2e\xa4\xb6\x27\x76\x0a\x9b\x3e\x94\x26\x40\xed\x46\x29\xa8\xf7\xe3\xc3\xd9\x63\x36\xb9\x02\x19\x02\x61\x36\x8d\x92\x00\x57\x73\x1d\x34\x79\x43\x11\x0a\xbd\x3d\xab\x11\xa6\xfb\x09\xad\x43\x20\xad\x25\x8e\xd2\x9b\xe4\x16\x4d\xdd\xb0\x00\x8a\x08\xf5\x1a\xe6\x23\x19\xe6\xc8\xee\x43\x8f\x79\x11\x73\x7c\xfc\x66\x73\x19\xb9\xd5\x65\xa4\x83\x2b\xe6\xd4\x98\xd8\x8e\x22\x5a\x1e\x33\x08\xc8\x37\x20\xc6\x50\x6d\xcf\x8d\x1d\xdc\xa8\x3a\x53\xcc\x26\x50\x04\x06\xe4\x86\x5e\x73\xa5\xf0\xe7\xbe\x17\xb4\x47\xe8\x55\x1e\xde\x67\xf8\xf0\x0d\x8b\xf0\xeb\x27\xa9\xc9\x77\x52\x9a\xe7\x8b\xb9\x99\xe1\x39\xb4\xe5\x31\x3e\xbe\xf9\x01\x3f\xcb\x65\xcc\x56\xe4\x52\x9b\x47\x88\x82\xc8\x3e\xbf\x5e\x71\x7c\x33\xf5\x82\xde\xf6\xca\x83\x03\x92\x8c\x6b\xdc\xbc\x0a\xb9\x8f\xb5\xe0\x33\xd0\x20\x75\x95\x2a\xeb\xd5\xd6\x90\x17\xf8\xb0\x73\x4d\x6f\x28\xdc\xe9\x6e\x7b\xa4\x0f\x25\xa5\x9c\x38\x69\x4f\x1c\xb7\x27\x8e\xda\x13\x87\xad\x89\x7e\x6b\xdc\x5e\x6f\x0b\x68\xef\xd0\x86\x60\x31\xde\x56\xa7\x78\xb0\x4f\xb7\x07\xdb\x11\x5a\x68\xb1\x01\xab\x19\xa3\x81\x9d\xf0\x86\x60\x9e\x5d\xf0\x86\x8e\x0f\x2b\xb6\x57\xff\x68\x7e\x44\xbd\x82\x46\xed\x3b\x25\x22\x08\x1b\x0e\x8a\x34\xbf\x50\xf4\xa0\x55\xcc\x20\xb9\x67\x62\xc9\x07\xd8\x8c\x73\xec\xa2\x85\x79\xdd\xf8\x3a\x4b\x79\xa8\xdf\xe1\xbd\xc1\x52\x3f\x6c\x1b\xf8\x95\x48\x22\xb9\xf2\x65\x82\xaf\x1b\x61\xef\x2a\xd2\xcb\x10\x40\x74\x50\xc5\x60\xa9\x7d\xdf\x71\x60\xba\xcc\x21\x48\x85\x9e\x7f\x65\x1a\xfa\x1d\x4a\x5c\x72\xaa\xde\xd2\x05\xc6\xdd\x0c\x62\x5e\xe4\xd7\x3b\x56\xa4\x2a\xa3\xab\xcd\x54\x4b\x3c\xe5\x7b\xd2\x8e\x3f\x85\xd2\x78\x99\xb8\xa7\xfd\x7e\xc5\x57\xd2\x61\xb8\xfc\xfd\xea\xcd\x4f\x2e\x0d\xe0\x62\xfb\x6a\x89\xb7\xe8\x2e\x7c\xf6\xb6\x07\x46\x05\x76\x1a\xce\x08\x9b\xbe\xc0\x59\x1f\xa2\x44\xaa\xe6\xda\xa3\x00\xde\xe4\x1a\x11\xf4\x76\x35\x59\xf3\xe4\x6d\xeb\x6e\x76\x3d\x6b\xac\x3f\x34\xc6\x0f\x07\xbb\xf3\x0f\xad\xcb\x87\xd5\x7c\x33\x6b\xe1\xe4\x9b\xc9\x1d\x98\x03\x0f\xee\x9b\xaa\x52\x51\xd6\xf4\x6a\xe9\xea\x28\x5b\x57\x0b\x5c\x6d\x2b\xd4\x5c\x30\xe0\xc8\x73\x68\x70\xdc\x36\xb0\x03\x52\xfe\xe8\x68\x2f\xd6\xc3\xa0\xf8\xb9\x11\x72\x36\xfe\x57\x87\xff\x06\x00\x00\xff\xff\xbd\xc6\xde\x2c\xfa\x20\x00\x00")

func static_gui_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_static_gui_index_html,
		"static/gui/index.html",
	)
}

func static_gui_index_html() (*asset, error) {
	bytes, err := static_gui_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "static/gui/index.html", size: 8442, mode: os.FileMode(420), modTime: time.Unix(1429225412, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/gui/index.html": static_gui_index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"static": &_bintree_t{nil, map[string]*_bintree_t{
		"gui": &_bintree_t{nil, map[string]*_bintree_t{
			"index.html": &_bintree_t{static_gui_index_html, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

