package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _static_gui_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x59\xff\x53\xdb\x3a\x12\xff\x9d\xbf\x42\xb8\xd7\x67\x67\x88\xed\x00\xed\xcc\x6b\xbe\x75\x5a\xda\xeb\xe3\x5e\xaf\xed\x03\xfa\xe6\x3a\x1c\xd7\x51\x6c\x25\x31\x38\x92\x2b\xcb\x21\x29\xf0\xbf\xdf\xae\x2c\x7f\x4d\xa0\xdc\x4d\xe7\xe6\x98\x21\xb1\x56\xbb\xab\x8f\x76\x57\xbb\x2b\x67\xb8\xfb\xe6\xe3\xd1\xd9\x97\x4f\x6f\xc9\x5c\x2d\xe2\xf1\xce\x10\xbf\x48\x4c\xf9\x6c\x64\x31\x6e\x21\x81\xd1\x70\xbc\x43\xc8\x50\x45\x2a\x66\xe3\x3f\x32\x1a\x5c\x31\x79\x09\x9f\x7d\xf2\x45\x64\x67\xd9\x84\x91\x23\xb1\x58\x30\xae\xc8\x2b\x4e\xe3\xf5\x77\x26\x87\x7e\xce\xbc\x83\x72\x0b\xa6\x28\x09\xe6\x54\xa6\x4c\x8d\xac\x4c\x4d\xdd\x5f\xad\x71\x39\x31\x57\x2a\x71\xd9\xb7\x2c\x5a\x8e\xac\x7f\xb8\x9f\x5f\xb9\xa0\x2b\xa1\x2a\x9a\xc4\xcc\x22\x81\xe0\x0a\xf4\x8e\xac\xe3\xb7\x23\x16\xce\x58\x4d\x8e\xd3\x05\x1b\x59\xcb\x88\x5d\x27\x42\xaa\x1a\xeb\x75\x14\xaa\xf9\x28\x64\xcb\x28\x60\xae\x1e\x74\x49\xc4\x23\x15\xd1\xd8\x4d\x03\x1a\xb3\xd1\xbe\x95\x03\x8b\x23\x7e\x45\x24\x8b\x47\x56\xaa\xd6\x31\x4b\xe7\x8c\x81\xa2\xb9\x64\xd3\x91\x85\xb0\xd2\xbe\xef\x2f\xe8\x2a\x08\xb9\x37\x11\x42\xa5\x4a\xd2\x04\x07\x81\x58\xf8\x25\xc1\x3f\xf4\x0e\xbd\x03\x3f\x48\xd3\x8a\xe6\x2d\x22\xe0\x4a\xd3\x1c\xae\x56\x4e\xd4\x3a\x01\xbc\x8a\xad\x94\x5f\xcc\x10\xe2\x4d\xa2\x19\xcf\x16\x29\xb9\x21\x0b\x2a\x67\x11\x77\x27\x42\x29\xb1\xe8\x93\x83\x5e\xb2\x1a\x90\x29\x6c\xca\x4d\xa3\xef\xac\x4f\x9e\x69\x02\xca\xbb\x34\x06\xa9\x3e\x09\x60\xbb\x4c\x0e\xc8\x5d\x53\x55\x9a\x50\xee\x85\x2c\x0d\x40\x69\x4d\x7e\xff\x19\xca\x87\x51\x9a\xc4\x74\xdd\x27\x93\x58\x04\x57\x85\xec\x93\x58\xd0\x30\xe2\x33\x90\x28\x19\xb8\xe0\x6c\x40\xb4\xfd\xfa\xe4\xd7\xe7\x4f\x07\x06\x61\x9f\x1c\x02\x12\x42\x33\x25\x1a\xf8\x0e\xef\xc5\x17\x88\x58\xc8\x3e\x79\xf2\xe2\xc5\x8b\x72\x41\xc9\xd0\x6b\x9b\xeb\x35\xa7\xbd\x44\x8a\x99\x64\x69\xcd\x3e\x4a\x24\xc5\x5a\xc8\x3b\xf4\xb5\x75\x21\x4c\xfd\x3c\x4e\x87\x13\x11\xae\xb5\xd9\xc3\x68\x49\x82\x98\xa6\xe9\xc8\xc2\xd8\xa0\x11\x67\xd2\x98\x7d\xb8\xeb\xba\xe4\x54\x41\x94\x05\x10\x47\xcb\x09\x95\xc4\x75\xcd\x14\x8c\x0b\x31\x33\x95\x7f\xb9\x21\x9b\xd2\x2c\x56\x46\xc5\x3d\x0b\xb8\xd3\x38\x8b\xc2\x92\xa7\xc9\x65\x14\x21\xd0\x12\x8a\xe1\x9a\x64\xe0\x76\x6e\x82\x24\x1f\x58\x2d\x31\x25\x66\x33\x88\x23\xb0\x66\x4c\x93\x94\x85\x16\x09\xa9\xa2\x86\x8c\x10\x72\x7a\x41\x06\x73\xe1\x71\x7b\x92\x4b\x5b\x84\xca\x88\xba\x6c\x05\xc1\x11\xb2\x70\x64\x4d\x69\x8c\xbc\x9a\x8a\xe8\xa5\x88\xcb\xa5\x1a\xd0\x30\x80\x41\xa8\x00\x93\x4a\x57\xf0\x78\x6d\x8d\xcf\x72\x38\x20\x11\xcd\xc0\x90\x82\x83\x2b\x80\xef\x01\xd1\x08\xd6\x71\xb5\xfa\xff\x15\xeb\xd0\xcf\x4d\xd9\xa0\xd1\x96\x5d\x27\x12\x4c\x52\x1c\xfb\x27\x56\x3d\xc1\x95\x79\xed\x44\xc7\xe3\xd0\xa7\x35\xc7\xfa\xe0\xd9\x96\x9f\xa3\xb0\x34\x61\x6b\x91\xc2\x3b\xa5\xfb\x9a\xee\x9f\x0a\xb9\x68\x49\x68\x92\x79\x8e\xd9\x14\x12\x13\xb8\x08\xfc\x9c\x32\x2a\x83\xb9\x45\x20\x09\xce\x05\xac\x07\x5e\x6e\xfb\xab\x16\x72\xa8\xc5\x9d\x49\x91\x25\x2d\x26\x60\x8b\x78\x92\xa9\x5a\x5e\xb2\x1a\x42\x26\x28\x2c\x02\xc7\x33\x60\x73\x11\x43\xcc\x8e\xac\x4f\x22\x55\xe4\xf3\xc9\x7b\xab\xcc\xbf\x61\x7b\xf5\xa6\x5d\x36\xa3\x3b\xcd\x26\x8b\xa8\x5a\x6c\xa2\x38\x81\xff\xea\x78\x9d\x64\x7c\xab\xdf\x7c\x84\xd5\xa0\x64\x71\xcd\x66\x85\xad\xe0\xab\x8d\x08\x4e\x7b\x93\x10\x47\x85\x20\x0d\x54\xb4\x04\x67\x40\x54\x94\x01\xf0\x9b\x58\x30\x74\xf5\xd0\x8f\xa3\x71\x5b\xb0\xc1\x79\x26\xe1\xd0\x43\xde\xdc\xce\x5d\xa4\x94\x02\x7f\x16\x3f\x0a\x7d\xf1\x28\xa3\xd9\x7c\xc3\xb5\x75\x00\x58\xa2\xa0\x42\xcd\x22\x35\xcf\x26\xba\x28\x2d\xa2\x2b\x36\x8d\xd7\x9c\xfb\xdf\xaa\x20\xb6\xc6\xa7\x22\x93\x01\x23\xe0\x81\x77\x91\xfa\x2d\x9b\x6c\x83\xdb\x84\x97\x3b\x11\x0d\xe7\x7b\x00\xa7\x0a\xdf\x6a\x4f\x75\x96\x56\xfa\xab\x92\xa9\x0f\xc2\xba\xd6\xd6\x0e\x88\xa9\x35\xe5\xce\x4e\x58\x5e\x7b\x82\xfc\xac\xa5\x9e\xe7\x11\xe7\x0b\xec\x24\xed\x92\x14\x5c\x41\xc4\x94\xa8\x39\x83\xc5\xa9\x84\xf3\x23\xe9\xf7\xf5\x6e\x67\x4b\x0e\x2e\x6a\x45\xf3\x64\x6d\x61\xc0\x6c\x41\xea\x03\x17\x8a\x76\x94\xb0\x90\x98\x68\x30\x27\xad\x60\xa9\xd2\xe7\x92\xc6\x19\xe3\xe2\x7a\x64\xed\xf7\x7a\x75\x1a\xd4\xfb\x91\xd5\xa4\xd0\x95\xe1\xd2\x05\xca\xb4\x25\x50\x86\x7b\xbd\xa7\x4d\x84\xad\x3c\x52\x0d\xcd\x63\xd3\x7a\x79\x65\xac\x8a\xd0\x7c\x5f\x93\xe1\x1c\x32\xf1\x55\x37\x5d\x98\x08\xe7\xfb\x15\xc3\xb3\x9a\x72\x9d\x38\x91\x1f\xda\x31\xce\x59\x5c\x49\xe8\xd4\x89\x21\x52\xf1\x70\xa6\xae\x85\xbc\x6a\xf1\x94\xee\x47\xc5\xe5\x22\x92\xf8\xd5\xa8\x66\x73\x29\xae\x89\x69\x4c\xee\x29\x8a\x10\x5a\xee\x2a\x75\x9f\x35\x8d\x52\x82\xc8\x37\x86\x6d\x1e\x28\xe8\x6d\x49\xf1\xf5\x5a\x80\x5d\x8f\x35\xfe\x13\x45\xc8\x9f\x28\xd2\xe6\xdf\x96\xb4\x1f\x87\x43\x09\x45\xe3\xaf\x45\x8c\x3e\x16\xca\x19\x4a\x15\x55\xe4\x27\xa2\x29\x70\x7c\x4d\x98\xfc\x1a\xd2\xf5\x63\xf1\x14\x48\xc8\x27\x26\xc9\x1b\xba\x7e\x10\x51\x3d\xfe\x7e\x78\xd4\x1e\x79\xd0\xb2\x20\x40\xb9\x47\x9c\xb0\xff\xf2\x7c\xf5\x9e\x0e\x1a\x36\x2b\x77\x6c\xae\x26\x21\xb2\xfc\xa7\xfb\x85\x28\x7e\x20\x7a\x17\xa1\x7b\xd8\xf4\xd3\xfc\x39\x78\x3e\x21\xbf\xb3\x35\x1c\xa0\x10\xfc\x0e\x84\xfa\xbc\xa2\x70\xbb\xd1\x8e\xbc\x32\x2c\x65\x39\xcc\xa7\xf4\x67\x91\x96\x5a\xe9\x42\xcf\x6d\xb8\xec\x21\x74\x2f\x36\xd0\x15\x7d\xcd\x69\x20\xc0\xfe\x1b\xf8\x02\xca\x97\x34\xd5\x00\x17\xeb\x23\xb8\xb9\x41\xb9\xce\xaf\x55\x96\xce\x5f\x64\xce\xb0\x38\x8d\xac\x43\x70\x00\x24\x86\x9c\xff\xe1\x30\x6a\x3c\x56\xa0\x87\x69\x00\x9b\x54\x24\x95\x41\x75\xe9\xa2\x97\x74\xe5\xcd\x84\x80\x06\x93\x26\x51\xaa\x6b\x1b\xd2\xa0\x66\x4d\x52\xff\xf2\x5b\xc6\xe4\xda\x3f\xf0\xf6\xbd\x43\x33\xd0\x17\xae\xcb\x54\x27\x29\xad\x6f\x7c\x9f\xea\xc7\xde\xe7\x2e\xdb\xd7\xb9\x47\x69\x07\x6d\x97\x00\x37\x16\x59\x38\x8d\xa1\x5c\xb5\x90\x6b\x53\x82\x26\x7f\xdf\xeb\x79\xfb\x66\xb8\xa9\xbc\xa6\xbd\x76\x6b\xbc\xa4\x60\x63\x4d\xd5\xee\x9c\x66\x3c\xc0\xb6\x9b\x40\x03\x08\x0d\xd9\x27\x2a\xa1\x21\x83\xfb\x96\x83\x8d\x59\x87\xdc\x68\x83\x4b\xa6\x32\xc9\x49\xc8\x02\x11\xb2\xcf\x27\xc7\x78\xb7\x86\x7b\x16\x57\x8e\xc3\xd9\x35\x94\xde\xd9\xdb\x55\xe2\xd8\xe7\x2f\x6f\x7f\xb9\xb0\xc9\x9e\x6e\xea\xe0\xcb\x1e\xe1\xc0\x76\xce\xff\xf5\xcb\xe0\x62\xef\x65\xc7\xf9\xe5\xf6\xc9\xed\xe0\xf6\x2f\x1d\xbb\xe3\xb1\x15\x0b\x1c\xb8\x3c\xea\x9e\xdf\xcb\xbb\xd1\xce\xed\xed\x79\xd7\xb2\x2e\x3a\xe7\xfb\x17\x1e\x54\x28\xec\x18\x1d\xff\x9f\x7b\xfe\xac\x4b\xec\xa7\x07\x3d\xbb\x03\x1c\x3c\x8b\x63\x00\x75\xb7\x53\x07\x1f\x2e\x1d\xbc\xae\x74\x89\x69\xff\xde\xc0\xa0\x05\x5e\x33\x90\x97\xfa\x5a\x43\xfa\x0d\xc6\xc1\x86\x3e\x25\xe1\x89\x2a\xe6\x80\xe3\xba\x70\x67\x5c\x15\xca\xa2\x29\x92\xbc\x98\xf1\x99\x9a\x93\x71\x7d\x8a\x40\x0a\x91\x64\x84\x9f\x1e\x34\xa7\x78\xea\xf8\xcc\xe9\x19\xf1\x3d\x62\x41\x47\x62\x0d\x34\xeb\xdd\x4e\x1d\x19\x70\x6e\x22\x08\x25\xbd\xce\xaf\x0b\xce\x65\x2a\x78\xb1\x08\xb4\x48\x29\xe4\x3c\x2f\x16\xb3\x9c\x9e\x2b\xbc\xfc\x03\xc3\xd7\xd1\x2d\xa0\xee\xc7\xad\x8e\x07\xf9\x4d\xb3\x78\xe0\xd6\x16\x9b\xb9\x18\x03\x53\x3a\x17\xd7\x8e\x99\x8d\xa6\x24\x17\x38\x83\x68\x21\xa3\x11\xb1\xcd\x7b\x19\x5d\x09\xed\x6a\x9f\xa5\x9a\x7a\xbb\xd0\xf1\x30\xbc\x9c\xd2\x72\x5b\x82\x45\x2b\xff\x3b\x53\x14\x7d\xe0\x69\xad\x67\x28\xdb\xe9\x92\xe7\xbd\x8e\x41\x51\x53\xdf\xec\x2e\xcc\x02\x3f\xd4\x7b\x94\x4b\xe5\x9a\x37\x95\x36\xdb\x11\xa3\xd4\x32\x3b\xb5\x36\xf9\x5b\x15\xfb\xb1\x28\x74\xc9\x2e\xaa\xc6\x16\x18\xf5\x86\xe4\xb1\x3a\xb5\xc5\x74\x43\x52\x28\xbc\x23\x0c\xee\xdf\x5b\x3c\x77\xcc\x53\x45\x67\x70\x96\x3f\x45\xc1\x4f\xf7\xdc\x11\x4d\x30\x46\x7f\xae\xdb\x3e\xa7\x4c\x7e\xc0\x9c\xf3\x58\x97\x95\x5b\xfc\xff\x76\x9a\xd6\xf9\x1e\xef\x21\xa5\xd3\x76\x9a\x87\x71\xa3\x0b\x33\xaa\xb5\x1e\x83\xe6\xd5\x72\x06\xbd\x16\xb4\x5a\x9e\x12\x7f\x8d\x56\x2c\x74\x0e\x3a\xad\x43\xed\xd5\x5b\x24\xd0\x41\x95\x92\x8e\xdd\x68\x87\xec\x2e\xa9\x2b\x3d\x12\x4b\x26\xe9\x8c\x81\x66\x7c\xc9\xd6\x69\xdd\xec\x1b\x7f\xf8\x1e\xd2\xb9\xb1\x75\xf9\xb6\xfb\x0f\xa9\xd9\xb3\x9f\xda\x77\x0f\xeb\xd2\xdb\xb3\xb7\xf4\x54\xf6\xde\x0f\x14\xc3\x9e\xb5\x66\xb8\xc4\x13\x67\x09\x7d\xe1\x0a\xf2\x5d\x8e\xa6\x68\x93\xaa\x68\xc7\xf9\x35\x64\xe4\x04\xdf\x19\x1f\x83\x67\x74\x1e\xde\xdf\x70\x6b\xd9\x3d\x81\xd1\x92\x84\xf1\xd0\xb1\x87\x4a\x8e\x87\x2a\x1c\xdb\x7b\xeb\x3d\xdb\x83\x6e\x29\x34\xc3\xc6\x52\xe7\xab\x8b\x3d\x3b\x9f\xf4\x41\xc0\x6e\x3a\x18\x97\x0f\x13\x58\xff\xe6\x6e\x70\x1f\xe8\x53\xd8\x57\x84\x7b\x6d\xa2\xe6\x20\xd5\x9c\x87\xa5\xce\x2d\x3c\x1f\xd6\xc5\xa0\xc6\x98\x6c\x67\x34\x16\x43\x5e\xc3\x1c\x26\xe7\xfc\x02\x6d\xb1\x09\x11\x0b\xe2\xa8\x5c\x3e\xa6\x13\xc8\x29\x7d\x72\x6e\x9d\x31\x29\xf1\xfd\xf9\xae\xd5\x25\xd6\x69\x16\x5c\xa5\xf8\xf0\x9a\x86\xf8\xf5\x41\x28\xf2\x4e\x08\xfd\xfc\x76\xae\x29\x2c\x83\x2e\x27\xc6\xc7\x8f\xbf\xe3\x67\x31\x8d\xc1\x4f\x8e\x95\x7e\x04\x8f\x86\xe6\xf9\xd5\x35\xc3\x7b\xf9\xae\x75\xd1\x2d\x30\x02\x92\x94\x29\x5c\xbc\x0c\x9f\x9b\x5a\x20\x69\x68\x7d\x52\xee\xae\x5b\x9b\x43\x59\x90\xc3\x46\x20\x39\xb7\xdc\xe7\xa0\x95\xf4\x20\x43\x15\x84\x67\x6d\xc2\x61\x9b\x70\xd0\x26\xec\xb7\x08\xbd\xd6\xb8\x3d\xdf\x56\xd0\x5e\xa1\x0d\xc1\x60\xbc\x28\x77\x71\x67\x9e\x2e\x76\xaa\x11\x7a\x28\x50\x2b\x70\x50\x28\x82\x0c\x1d\xec\x41\xa7\xf6\x36\x66\xf8\xf8\x7a\x7d\x1c\x3a\x65\x6f\xdd\xc1\x99\x23\xfc\xfd\x02\xd3\xe3\x41\x58\xe4\x45\x54\xb1\x58\xbf\xa6\x52\xb3\x81\x26\xec\xd9\xf4\xb3\x03\x9a\x3b\x1e\xcc\x98\xee\xe9\x46\xff\xb0\x71\x0a\x3d\xc1\x3b\x19\x85\xef\x23\xce\xc0\x17\xfa\x15\x6f\x17\x9a\x95\x14\xf2\x5b\x1a\x2d\x59\x1f\xdb\x23\x86\x7d\x4d\xa4\xdf\xd7\xbc\x4a\x13\x16\xa8\x13\xec\xe4\x0c\xf7\x5d\xd5\x52\x5d\x47\x3c\x14\xd7\x9e\xe0\xf8\xbe\x06\xd6\x2e\x1a\x1c\xa7\x08\x78\x44\x07\x79\x15\xa6\xda\x1d\xa8\x0d\x64\xbb\xb6\x07\x8c\xf3\x53\xdd\x62\x6d\x70\xe2\x94\x5d\xb6\x31\x0e\x08\x6e\xd6\x3c\xfd\x26\xb4\xde\x1c\x21\x57\x71\x96\xda\x42\xb5\xec\x50\xbc\x68\xea\x78\x53\x1a\x42\x1a\x71\x9e\xf7\x7a\xa5\x5c\xc1\x87\xa6\xff\xdb\xe9\xc7\x0f\x8e\xe5\xc3\x55\xe3\xe5\x12\xef\x3c\x7b\xf0\xd9\xad\x36\x8c\x06\xec\x34\xe2\x19\x16\xdd\x45\xaa\x07\x07\x4d\xc8\xe6\xdc\xbd\x00\x3e\x66\x0a\x11\x74\x37\x2d\x59\x3b\x0c\x55\xf3\xa8\x57\x1d\x34\xe6\xef\x1a\xe3\xbb\x9d\x4d\xfa\x5d\xb3\xb9\x70\x8c\xe5\x9b\x39\x0a\x89\x1f\x27\x97\xe0\x0e\xdc\xb8\xa7\x93\x6c\xc9\x59\xb3\xab\xe1\xab\xa3\x6c\x35\xb7\x38\xdb\x36\xa8\xee\x65\x61\xcb\x73\x28\xb9\x4e\x1b\xd8\x0e\x29\x7e\xb5\x31\x57\x9d\xa1\x9f\xff\x5e\x03\x57\x50\xfc\xf9\xf1\xdf\x01\x00\x00\xff\xff\x70\x88\xae\xab\x8e\x1c\x00\x00")

func static_gui_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_static_gui_index_html,
		"static/gui/index.html",
	)
}

func static_gui_index_html() (*asset, error) {
	bytes, err := static_gui_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "static/gui/index.html", size: 7310, mode: os.FileMode(420), modTime: time.Unix(1428816580, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/gui/index.html": static_gui_index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"static": &_bintree_t{nil, map[string]*_bintree_t{
		"gui": &_bintree_t{nil, map[string]*_bintree_t{
			"index.html": &_bintree_t{static_gui_index_html, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

