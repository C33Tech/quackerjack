// Code generated by go-bindata.
// sources:
// static/gui/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticGuiIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\xef\x72\xdb\x38\x92\xff\xee\xa7\xe8\xc0\x97\x21\x59\x12\x49\x39\xb6\xab\x76\x64\x51\x73\x89\x27\x3b\x9b\xdb\xdc\xc4\x6b\x3b\x5b\x37\xe5\xd3\xa5\x20\x12\x12\x61\x93\x00\x07\x00\x29\x69\x6c\xbf\xfb\x15\xc0\x3f\x22\x29\x39\x76\xae\xe6\xb6\x66\xab\x36\x55\xb1\x80\x46\x77\xe3\x87\xee\x46\xa3\x01\x69\xf2\xea\xc7\x4f\xe7\xd7\xbf\x5c\xbc\x87\x58\xa5\xc9\xf4\x60\xa2\x3f\x20\xc1\x6c\x19\x20\xc2\x90\x26\x10\x1c\x4d\x0f\x00\x26\x8a\xaa\x84\x4c\xaf\x78\x48\x71\x02\xe7\x3c\x4d\x09\x53\xf0\x96\xe1\x64\xf3\x1b\x11\x13\xbf\x1c\x3e\xd0\x9c\x29\x51\x18\xc2\x18\x0b\x49\x54\x80\x72\xb5\x70\xff\x84\xa6\xcd\x40\xac\x54\xe6\x92\x5f\x73\x5a\x04\xe8\xbf\xdc\xcf\x6f\xdd\x73\x9e\x66\x58\xd1\x79\x42\x10\x84\x9c\x29\xc2\x54\x80\x3e\xbc\x0f\x48\xb4\x24\x2d\x39\x86\x53\x12\xa0\x82\x92\x55\xc6\x85\x6a\xb1\xae\x68\xa4\xe2\x20\x22\x05\x0d\x89\x6b\x3a\x43\xa0\x8c\x2a\x8a\x13\x57\x86\x38\x21\xc1\x11\x2a\x81\x25\x94\xdd\x81\x20\x49\x80\xa4\xda\x24\x44\xc6\x84\x28\x04\xb1\x20\x8b\x00\x69\x58\x72\xec\xfb\x29\x5e\x87\x11\xf3\xe6\x9c\x2b\xa9\x04\xce\x74\x27\xe4\xa9\xdf\x10\xfc\x63\xef\xd8\x7b\xe3\x87\x52\x6e\x69\x5e\x4a\x99\x17\x4a\x59\xc2\x35\xca\x41\x6d\x32\x12\x20\x45\xd6\xca\xaf\x47\x00\xbc\x39\x5d\xb2\x3c\x95\x70\x0f\x29\x16\x4b\xca\xdc\x39\x57\x8a\xa7\x63\x78\x33\xca\xd6\x67\xb0\xe0\x4c\xb9\x92\xfe\x46\xc6\x70\x62\x08\x5a\xde\xc5\x09\x5d\xb2\x31\x84\x84\x29\x22\xce\xe0\xb1\xab\x4a\x66\x98\x79\x11\x91\x21\xdc\xb7\xe5\x8f\x4e\xb4\x7c\x44\x65\x96\xe0\xcd\x18\xe6\x09\x0f\xef\x6a\xd9\xc3\x84\xe3\x88\xb2\x25\xdc\x6f\x19\x18\x67\xe4\x0c\x8c\xfd\xc6\xf0\xa7\xd3\xd7\x67\x15\xc2\x31\x1c\x8f\xb2\x35\xe0\x5c\xf1\x0e\xbe\xe3\x27\xf1\x85\x3c\xe1\x62\x0c\x87\xdf\x7f\xff\x7d\x33\xa1\x20\xda\x6b\xbb\xf3\x75\x87\xbd\x4c\xf0\xa5\x20\xb2\x65\x1f\xc5\xb3\x7a\xae\x8a\x57\x47\x24\x11\x70\x0f\x73\x1c\xde\x2d\x05\xcf\x59\x54\x2f\x79\x34\x7a\x7d\xd6\x26\x67\x5c\x52\x45\x79\x0b\x5b\x86\x23\xbd\x70\xcd\xab\x55\xce\xb9\x88\x88\xa8\x9c\xe0\x0a\xba\x8c\x95\x2b\x70\x44\x73\xb9\x9f\x23\x21\x8b\x3e\x43\xe5\x0d\xa9\x04\xbf\x23\x70\xdf\xac\x7e\xb1\x58\x54\xe6\x91\x31\x8e\xf8\x6a\x0c\x87\xa3\xd1\x08\xb4\x2d\xf5\xff\x53\x2d\xeb\xae\xc8\xfc\x8e\x2a\xb7\x34\x6b\xca\xb9\x8a\x0d\x38\xcc\x74\xf4\x52\x2c\x49\xd4\x4c\x10\x56\x5b\xee\xbe\x82\x34\x86\xa3\x6c\x0d\x92\x27\x34\x82\xc3\x30\x0c\x1b\xa8\x5d\x78\xbd\x05\xd7\x3e\xad\x61\x1c\x9d\x96\x8d\x9d\x69\xe2\x93\xc6\x07\x2d\xee\x51\xcd\xdd\xa8\xdd\x1d\xea\x58\x6c\x17\x65\x6f\x9e\xac\x8e\xda\x05\x4e\x69\xb2\x19\x43\xca\x19\x97\x19\x0e\xab\xe0\x98\xf8\x66\x3b\x4d\x0f\x26\x7e\x99\x8a\x26\x73\x1e\x6d\xcc\x3e\x8b\x68\x01\x61\x82\xa5\x0c\x90\x4e\x06\x98\x32\x22\xaa\x7d\x36\x79\xe5\xba\x70\xa5\xb0\xa2\x21\x30\x5c\xcc\xb1\x00\xd7\xad\x86\x18\x6e\xc4\xaa\xa1\xf2\xc3\x8d\xc8\x02\xe7\x89\xaa\x54\x3c\x31\x81\xbb\x48\x72\x1a\x35\x3c\x5d\xae\x4a\x51\x19\xa1\x2d\x1e\x80\xc9\x3c\x57\x8a\xb3\x2a\x2b\x94\x1d\xd4\x13\x53\x7c\xb9\x4c\x88\x0e\xa0\x04\x67\x92\x44\x08\x22\xac\x70\x45\xd6\x10\x4a\x7a\x4d\xc6\x62\xa9\xf3\xeb\x61\x29\x8d\x00\x0b\x8a\x5d\xb2\xce\x30\x8b\x48\x14\xa0\x05\x4e\x34\xaf\xa1\x6a\xf4\x82\x27\xcd\x54\x1d\x68\x3a\x63\x65\x98\xd5\x60\xa4\x70\x39\x4b\x36\x68\x7a\x5d\xc2\x61\xb8\xa0\x4b\xac\x77\xd1\xc4\xd7\x7c\x5f\x11\xa5\x21\x67\xae\x51\xff\x8f\x62\x9d\xf8\xa5\x29\x3b\x34\xdc\xb3\xeb\x5c\x60\x16\xd5\x79\xfe\x10\x4d\xff\x96\xe3\xf0\x8e\x88\x5b\x1c\xde\x35\x07\xd9\xa5\x49\x40\x13\x1f\xb7\x1c\xeb\x47\xb4\xe8\xf9\x99\x46\x8d\x09\x7b\x93\xd4\xde\x69\xdc\xd7\x75\xff\x82\x8b\xb4\x27\x61\x48\x55\x5b\xe7\x15\x04\x82\x6b\x3f\x4b\x82\x45\x18\x23\x48\x89\x8a\x79\x14\xa0\x25\x51\x7d\x7f\xb5\x42\x4e\x6b\x71\x75\xba\xcb\x7a\x4c\x00\x13\xca\xb2\x5c\xb5\x0e\x22\xd4\x11\xaa\x82\x02\x41\x96\xe0\x90\xc4\x3c\x89\x88\x08\xd0\x05\x97\x0a\x3e\x5f\x7e\x44\xcd\x81\x1b\xf5\x67\xef\xda\x65\x37\xba\x65\x3e\x4f\xe9\x76\xb2\xb9\x62\x30\x57\x6c\xbb\xbd\x2e\x73\xb6\xd7\x6f\xbe\x86\xd5\xa1\xe4\x49\xcb\x66\xb5\xad\x18\x2e\xfa\x88\x5e\xb9\x6e\x97\x90\xd0\x5a\x10\x87\x8a\x16\x04\x4d\x27\x78\x1b\x00\x7f\xe1\x29\xd1\xae\x9e\xf8\x09\x9d\xf6\x05\x3b\x9c\xd7\x02\x53\x46\xd9\x72\x3f\x77\x9d\x52\x6a\xfc\x79\xf2\x22\xf4\x75\xd3\x1c\x37\xfd\xa5\xb4\x01\xe8\x9a\x64\xec\xfb\x4b\xaa\xe2\x7c\x6e\xaa\x90\x94\xde\x91\x45\xb2\x61\xcc\xff\x75\x1b\xc4\x68\x7a\xc5\x73\x11\x12\xe0\x0c\x7e\xa2\xea\x2f\xf9\x7c\x1f\xdc\x2e\xbc\xd2\x89\xda\x70\xbe\xc7\x70\xb1\x0d\xdf\xed\x9a\xda\x2c\xbd\xf4\xb7\x4d\xa6\x3e\xc3\x85\x29\xae\x5a\x1b\xa4\x2a\x2e\x9a\x95\x5d\x92\xb2\xd8\xa8\x52\xbe\xf4\x3c\x0f\xec\x5f\xe8\x1d\x91\x43\x90\x3c\x25\xc0\x17\xa0\x62\x22\x09\x60\x41\x20\x14\xf8\xb7\xcd\x2b\x67\x4f\x0e\xae\x8b\x83\xee\xce\xda\xc3\xa0\xb3\x05\xb4\x3b\xae\x54\x82\x66\x24\x82\x2a\x1a\xaa\x9d\x56\xb3\x6c\xd3\x67\x81\x93\x9c\x30\xbe\x0a\xd0\xd1\x68\xd4\xa6\xa5\x94\x05\xa8\x4b\xc1\xeb\x8a\xcb\x1c\x50\x55\x1d\x5a\x16\x21\x5d\x84\xbd\x3c\xb2\xed\x56\xcd\xae\xf5\xca\x52\xa8\x7b\x08\x69\x7a\x75\xa8\x34\x69\xda\xd4\x1b\xed\x73\x28\x3e\x32\x7c\x05\x8d\x08\xff\x62\xca\x71\x9d\x31\xe3\xa3\x36\xcb\x49\x07\x98\xc9\xb2\x5a\x26\x8c\x31\x63\x24\xd9\x4a\x99\x3c\xab\xe3\x69\xcb\xc3\x88\x5a\x71\x71\xd7\xe3\x69\x2d\x4b\x2b\x6f\x4d\x25\xc0\x6f\xf7\x5b\x6e\x12\x7c\x05\x55\xf1\xfa\xa4\x2b\x43\x9e\xb8\x6b\xe9\x9e\x40\xd5\xe0\x8b\x85\x24\xca\x3d\xd9\x7b\x72\x69\x78\x8a\x2b\x9c\x7c\xa9\x43\x0c\x4d\x47\xcf\x9e\x2b\xba\x64\xd6\xa7\x9c\xda\xde\x67\xe4\xbe\x13\xa6\x97\xed\xf6\xa1\x7c\x12\x55\x8d\xe7\x4b\x46\xc4\x97\x08\x6f\x5e\x8e\xab\x46\x04\x17\x44\xc0\x8f\x78\xf3\x2c\xb2\x4e\xb7\x1d\x59\xcf\x6e\xa2\x17\x6e\xa1\x3c\x0c\xb5\xdc\x0b\xf6\xce\xff\x71\xe7\x8c\x5e\x9f\x75\x0c\xd9\x98\xa0\xba\x65\x46\x9a\xe5\x5b\xd7\x2b\xf8\xea\x89\xa5\x6a\xe7\xa5\x91\x7b\xdc\x8d\xc1\xf8\x74\x7a\xcd\x33\xf8\x2b\xd9\xac\xb8\x88\xe4\xc4\x8f\x4f\x3b\xe3\x0a\xcf\x13\x62\x7c\x7b\x57\xb1\x34\x5b\xb2\x1c\x32\x7f\xeb\x84\xd3\x4b\x04\x66\x6c\xc7\x65\x5f\x43\x77\xba\x83\xae\xae\x58\xae\x42\x2e\xc8\x2e\xbe\x10\xb3\x02\x4b\x03\x30\xdd\x9c\xc7\x58\x5f\x95\xcb\x1b\x32\x32\x99\x09\x62\xa2\x8f\x9d\x00\x1d\x8f\x46\x7a\x17\x97\xfc\xdf\x84\xe9\xa4\x8f\xc9\xcc\x26\x71\x9a\x25\x94\x2d\xbf\xd4\xd5\xef\xfb\xb5\xa6\x90\xd6\xde\xea\x41\xad\x33\x5b\x2d\xa9\xe1\x3c\x1b\xd2\x9d\xe6\x16\xec\x44\x86\x82\x66\x0a\xa4\x08\xb7\x77\x79\x7c\x8b\xd7\xde\x92\xf3\x65\x42\x70\x46\xa5\x39\x41\x35\xcd\x4f\xe8\x5c\xfa\xb7\xbf\xe6\x44\x6c\xfc\x37\xde\x91\x77\x5c\x75\xcc\x3d\xfe\x56\x9a\xec\x66\xf4\x4d\x9f\x52\xfd\xd2\x67\x82\xdb\xfe\x2b\xc1\x8b\xb4\x87\x11\xbb\x95\x5e\x98\xf0\x3c\x5a\x24\x58\x90\x1e\x72\xe3\x56\xef\x56\xfa\x47\xde\xc8\x3b\xaa\xba\xbb\xca\x5b\xda\x5b\x8f\x11\xb7\xb8\xc0\x25\xd5\xb8\x71\x91\xb3\x50\x17\xf7\xb0\x24\xea\xf3\xe5\xc7\x0b\x2c\x70\x4a\x14\x11\xb6\x2e\xff\x1c\xb8\x37\x06\x17\x44\xe5\x82\x41\x44\x42\x1e\x91\xcf\x97\x1f\xce\x79\x9a\x71\x46\x98\xb2\x6d\x46\x56\x70\x49\x96\xef\xd7\x99\x6d\xdd\xfc\xf0\xf0\xdd\xcc\x82\x81\x29\x1d\x61\x00\x56\xa0\x3b\x96\x7d\xf3\x3f\xdf\x9d\xcd\x06\x3f\x38\xf6\x77\x0f\x87\x0f\x67\x0f\xff\xe6\x58\x8e\x47\xd6\x24\xb4\x13\x1e\x9a\x9b\x85\x57\xd6\xbc\xce\xc3\xc3\xcd\x10\xa1\x99\x73\x73\x34\xf3\x04\x31\x75\xa9\xed\xff\xf7\xc0\x5f\x0e\xc1\x7a\xfd\x66\x64\x39\xce\xc3\x03\xcb\x93\xe4\x00\xe0\xf1\xa0\x0d\x3e\x2a\x6c\x7d\x29\x1a\x42\x55\x64\xfe\x88\x15\xee\x81\x37\x0c\xf0\x83\xb9\x3c\xc1\xb8\xc3\x78\xb6\xa3\x4f\x89\x9c\x85\x58\x11\x5b\x2a\x31\x84\x14\xaf\x6b\x65\x74\xa1\x49\x5e\x42\xd8\x52\xc5\x30\x6d\x0f\x01\x48\x25\x20\xd0\x7f\x3d\x99\xcf\x75\x06\x60\x4b\x7b\x54\x89\x0f\x00\x79\x9e\x87\xce\x0c\xeb\xe3\x41\x1b\x99\x54\x62\x17\x41\x2e\x89\xf8\x48\xd9\x9d\xad\x1b\xda\x9e\x43\xe3\xc4\x16\x0e\xdd\x85\x20\x00\xeb\x17\x9e\x5f\xe7\x73\xf2\x77\x7d\xf0\x5b\x5b\x34\x95\xf6\xba\x8a\xdc\xf0\x5c\xe5\xf3\x32\x94\xb4\x4e\x1f\xc1\x00\x6a\xe5\x15\x2c\x20\x89\x24\x1d\xdd\x1f\x98\x54\x78\x29\x70\x7a\x41\xc3\xa7\x75\xd3\x9a\xcb\x68\xdf\xa3\xb8\xb3\x5e\x74\x88\x76\xd7\x1b\x09\xbc\x2a\x2f\x61\xf6\xad\xe4\xac\x9e\xea\xf6\x6f\x7a\x5f\xda\xa6\x82\x36\xd7\x19\xe4\x78\x05\x4e\x0c\x8f\xf7\xf9\xf2\xa3\x73\xd6\x61\xab\x1e\x92\x90\xe3\xc9\x98\xaf\xec\x6a\x94\x2e\xa0\x14\xb8\x7e\xc6\x64\x8d\x9a\x76\x11\xe5\x78\x7a\xdf\xd8\x4d\x48\xec\xd9\x05\x46\xf9\x7f\x12\x85\x75\x70\x79\xd7\x5a\xcc\x19\xc2\xe9\xc8\xa9\x00\xb4\x34\x77\x4b\xad\x4a\xf7\xb3\x2a\xcf\x4b\xa9\x52\xf3\xae\xd2\x6e\x6d\x56\x29\x45\xd5\x22\xd1\x2e\x7f\xaf\x58\x7a\x29\x0a\x53\x2b\xd5\xe9\x7c\x0f\x8c\x2a\xf3\x3b\x5e\x28\xa5\x7d\xdf\xa4\x71\xd4\x7a\x91\xa3\x29\x5e\x12\x34\x06\x94\x8b\xc4\xb6\xd0\xe0\xf9\x39\xe3\x3c\x9d\x33\x4c\x13\x67\x80\x2c\x07\x55\x4a\x1f\x9d\x5e\xc4\xf6\x1d\xfc\x44\xdc\xfe\x3e\x0e\x3e\xc7\x99\x8e\xd9\xdf\xd7\xc5\x9f\x25\x11\x3f\xeb\x9c\xfb\x52\xf7\x36\x4b\xfc\xc7\x39\xb8\xb4\x5a\x41\xc9\xea\x1b\x75\x7e\xd4\xb7\xbd\x3f\x76\xc4\xfc\x19\x87\x64\xce\xf9\xdd\x05\x97\xea\x9f\x23\x62\x2e\xf0\x92\x7c\x53\xc4\xd4\x4b\xfc\x57\xc0\xfc\x1e\x01\xf3\x77\xca\xfe\x9f\x0e\x90\x3f\x46\x7e\xd1\xeb\xfb\x57\xa4\x7c\x4b\xa4\x1c\x74\x6b\x91\x9d\xcb\x7f\xb5\x2e\xa3\xb3\x32\xc5\xdb\x62\x79\x41\xc4\x8f\x78\xe3\x29\xfe\x67\xba\x26\x91\xfd\xc6\xe9\xd5\x34\x5e\xfb\x1a\x8e\x1c\x0f\x2b\x25\x6c\xab\x73\xe5\xb6\x86\xd0\x56\x7a\xce\x0b\x22\xf0\x92\x5c\x10\x11\x12\xa6\x9c\xde\xbb\x70\xe7\x5f\x69\x1e\xcb\x5c\x11\xad\xf1\xd7\xd4\x0c\xac\xd7\xd6\xe3\xd7\x75\x99\xe5\x59\x7b\xee\xed\xd6\xe0\x19\xc5\xce\x59\x69\x3c\xdf\x87\x2b\x2e\x14\xa8\x98\x40\x75\xc1\x86\x84\x4a\x65\x06\x25\x17\xe5\x1d\x3b\x80\x9b\x99\xa1\x2c\xb8\x00\xbb\xc0\x02\xd6\x40\x59\x09\xbe\xbe\xb9\xb7\xca\xf2\x4a\xcc\xcb\x72\x19\xdb\x37\xeb\x61\x97\xf1\x66\x3d\x9b\x75\x3d\xd8\x08\xe8\x86\x5d\x97\xa8\x36\x1e\xc2\xdc\x81\xfb\xaa\x8a\x9d\xdf\x1c\xcd\xc0\x05\x7c\x73\x34\x7b\x74\x4a\xb9\x0d\x04\x30\xda\x83\xab\xd6\xb7\x85\xb4\x19\x0c\x76\x02\xb6\x79\x4f\x70\x3c\x9c\x65\x84\x45\xb6\x35\x51\x62\x3a\x51\xd1\xd4\x1a\x6c\x06\x96\x37\xf1\x55\x54\x75\x6b\x8d\x37\xeb\xd9\xcd\x68\x36\xb0\xc0\xee\xd2\x8e\x66\x03\xcb\x29\xf9\x7d\x25\xa6\x56\x77\x7d\xdb\x5c\xc6\xb3\x66\x4b\xee\xe6\xb0\xfe\x8d\xbe\x4e\x0c\xd7\x3c\x6b\x2e\xf5\xa8\x0e\x88\xbe\x3e\x6f\xc1\xc5\x7b\x1c\xc6\x5b\xf3\x15\x43\xa0\x43\xc0\xdb\x89\xf6\x4c\xd5\x5e\x7b\xe7\xe1\xc1\x28\x45\xd3\x49\x7c\xb2\x7d\x1e\xb7\x06\xcd\x25\xa9\xf0\xde\xe6\x2a\xe6\x26\xc1\x55\xee\xd5\x79\xda\x19\x58\x68\xfa\xef\xd6\xa0\x3d\x3c\xb0\x26\x3e\x9e\x6a\x83\x15\x9e\xc9\x1d\x03\x0b\x12\x93\x43\xcc\x13\xe6\x24\x9b\xea\x91\xf3\xf2\xd7\x05\x9a\x39\xab\x9e\x25\x2c\xe7\x99\x93\xe1\xca\xbc\x77\xec\x31\xe8\xee\xe0\x1f\xdc\x3a\xdf\x6c\x89\x32\xae\x74\xc0\x47\x19\x04\x70\xff\x78\xf6\xd4\xf6\xbc\x22\x4c\x51\x0d\x77\xbb\x52\xcd\xc0\x20\xe8\x8d\xeb\x30\x46\x1a\x12\x9a\x9d\xb5\x18\xb3\xfd\x8c\x55\x2a\xd1\xbc\x15\x73\x94\xdd\xb0\x19\x04\x90\xed\x40\x0c\xd5\x1a\x02\x88\x78\x98\x6b\x71\x6f\x49\xd4\xfb\x84\xe8\xe6\xbb\xcd\x87\xc8\x6e\x9e\xcd\x1c\x3d\x62\x56\xaf\x83\xfe\x4d\x84\x5a\x39\xea\x1d\x16\x60\xb8\xb6\xeb\xc6\x0a\xeb\x95\x57\xb3\x27\x78\x4e\x12\x39\x86\x1b\x74\x4d\x84\xa0\xf3\x84\xbc\x42\x43\x40\x57\x79\x78\x27\x75\xe3\x1d\x8e\xf4\xc7\xcf\x5c\xc1\x4f\x9c\x9b\xf6\xfb\xd8\x50\x48\xae\x04\x4e\x74\xf3\xd3\x5f\xf5\xdf\x7a\x58\xc7\x2a\x7c\x50\xa6\xc9\x0b\x12\x55\xed\xb7\x2b\x22\x79\x4a\x5e\xa1\xd9\xb0\x5e\x38\x56\x58\x12\xa5\x27\x6f\x42\xe9\xbe\x95\xb6\x0d\xb4\x31\x34\x26\x1b\xb6\xc6\xb4\xec\x18\x6e\xa2\xc2\x8e\xb2\x1b\xe4\x9e\xa2\xd9\x10\x46\xce\x10\x6a\xc2\x49\x9f\x70\xdc\x27\xbc\xe9\x13\x8e\x7a\x84\x51\xaf\xdf\x1f\xef\x2b\xe8\xcf\xd0\x87\x50\x61\x9c\x35\xab\x78\xac\x5a\xb3\x83\x6d\x4f\x7b\x28\xdd\xbc\xc3\xc2\x38\x0d\x02\x60\x64\x55\x3a\xd0\x0e\xd5\xda\xf1\xde\x61\x51\x3d\x20\xdd\x9b\x9f\x0c\x5d\xc5\x7c\xf5\x93\xa0\xd1\x47\xca\x88\x1c\x83\xf9\x2e\x7d\x08\x82\xc8\x8c\x33\x49\x0b\x32\x06\x25\x72\x32\x84\x14\x53\xf3\xc5\xd8\x5b\x99\x91\x50\x5d\x62\x45\x79\xc5\xfd\xb8\x7d\x55\x5a\x51\x16\xf1\x95\xc7\x59\xc2\x71\x04\x41\xf3\xe6\x61\xd7\x5b\x40\xa3\x2b\xa8\x1e\xea\x3f\xc2\x59\x05\x8d\xea\xe4\xad\xb9\x74\xe4\x5f\x99\x57\xa6\x1d\x4e\x3d\x64\x35\x0f\x1e\x76\x41\xa3\xdd\x94\x6e\xbe\x72\x6e\x3f\xa3\x68\xae\x7a\x77\xf5\x85\x5a\x09\xa8\xfe\x46\xcf\xf1\x16\x38\x22\x1f\x98\x7d\x3a\x1a\x35\x72\x35\x9f\xde\x2e\xff\x71\xf5\xe9\x67\x1b\xf9\x38\xa3\x3f\x14\x34\x0a\xd0\xa0\xa0\xd1\x70\xbb\x60\x6d\x40\xa7\x13\x8c\x74\x61\xbf\xd2\x54\x8f\x08\xc1\x45\x77\xec\x49\x00\x9f\x72\xa5\x11\x0c\x77\x2d\xb9\xfd\x57\x19\x5d\x5b\x05\x02\xe3\xb9\xb3\x1e\x47\xeb\xc5\xc9\xe0\xea\x8e\x3f\x76\xfa\x8f\x07\xbb\xf4\xc7\xde\x9b\x59\xe5\x9b\x6e\x5e\xd3\xc4\x4f\xf3\x5b\x08\x40\x9b\xc6\xcb\xb0\x90\xa4\xe1\x6c\x59\xbe\xe2\x6b\xaf\xa3\xf7\x22\xa6\x47\xfb\x26\x37\xef\x62\xc8\xf1\x62\x1a\x11\xbb\x0f\xec\x00\xea\x1f\xd0\x54\xef\xc1\x13\xbf\xfc\xe9\xcc\xc4\x37\x3f\xf6\xfb\xdf\x00\x00\x00\xff\xff\x83\x5f\x28\x4f\xfc\x27\x00\x00")

func staticGuiIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticGuiIndexHtml,
		"static/gui/index.html",
	)
}

func staticGuiIndexHtml() (*asset, error) {
	bytes, err := staticGuiIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/gui/index.html", size: 10236, mode: os.FileMode(420), modTime: time.Unix(1549002410, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/gui/index.html": staticGuiIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"gui": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{staticGuiIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

