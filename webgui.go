package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _static_gui_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x5a\xff\x72\xdb\x36\x12\xfe\xdf\x4f\x81\x20\xd7\x92\x1a\x89\xa4\x1c\xdb\x33\xad\x2c\x29\x97\xba\xbe\xd6\xd7\x5e\x93\xc6\xce\xcd\x75\x7c\xbe\x0c\x44\x42\x12\x6c\x8a\x60\x41\x50\x3f\xea\xf8\xdd\x6f\x17\x04\x29\x92\x92\x63\xf7\xa6\xd3\xb9\xcc\x58\x22\x81\xdd\xc5\x07\xec\x62\xf7\x03\x94\xe1\x8b\x6f\xdf\x9e\x5d\xfd\xf2\xee\x9c\xcc\xf5\x22\x1e\x1f\x0c\xf1\x8b\xc4\x2c\x99\x8d\x28\x4f\x28\x36\x70\x16\x8d\x0f\x08\x19\x6a\xa1\x63\x3e\xfe\x39\x67\xe1\x1d\x57\xb7\xf0\x39\x20\xbf\xc8\xfc\x2a\x9f\x70\x72\x26\x17\x0b\x9e\x68\xf2\x26\x61\xf1\xe6\x37\xae\x86\x41\x21\x7c\x80\x7a\x0b\xae\x19\x09\xe7\x4c\x65\x5c\x8f\x68\xae\xa7\xde\x57\x74\x5c\x75\xcc\xb5\x4e\x3d\xfe\x6b\x2e\x96\x23\xfa\x2f\xef\xc3\x1b\x0f\x6c\xa5\x4c\x8b\x49\xcc\x29\x09\x65\xa2\xc1\xee\x88\x5e\x9c\x8f\x78\x34\xe3\x35\xbd\x84\x2d\xf8\x88\x2e\x05\x5f\xa5\x52\xe9\x9a\xe8\x4a\x44\x7a\x3e\x8a\xf8\x52\x84\xdc\x33\x2f\x3d\x22\x12\xa1\x05\x8b\xbd\x2c\x64\x31\x1f\x1d\xd2\x02\x58\x2c\x92\x3b\xa2\x78\x3c\xa2\x99\xde\xc4\x3c\x9b\x73\x0e\x86\xe6\x8a\x4f\x47\x14\x61\x65\x83\x20\x58\xb0\x75\x18\x25\xfe\x44\x4a\x9d\x69\xc5\x52\x7c\x09\xe5\x22\xa8\x1a\x82\x23\xff\xc8\x7f\x15\x84\x59\xb6\x6d\xf3\x17\x02\xa4\xb2\xac\x80\x6b\x8c\x13\xbd\x49\x01\xaf\xe6\x6b\x1d\x94\x3d\x84\xf8\x13\x31\x4b\xf2\x45\x46\xee\xc9\x82\xa9\x99\x48\xbc\x89\xd4\x5a\x2e\x06\xe4\x55\x3f\x5d\x9f\x92\x29\x4c\xca\xcb\xc4\x6f\x7c\x40\x8e\x4d\x03\xea\x7b\x2c\x06\xad\x01\x09\x61\xba\x5c\x9d\x92\x87\xa6\xa9\x2c\x65\x89\x1f\xf1\x2c\x04\xa3\x35\xfd\xc3\x63\xd4\x8f\x44\x96\xc6\x6c\x33\x20\x93\x58\x86\x77\xa5\xee\xcb\x58\xb2\x48\x24\x33\xd0\xa8\x04\x12\x99\xf0\x53\x62\xd6\x6f\x40\xbe\x3a\xf9\xe2\xd4\x22\x1c\x90\x23\x40\x42\x58\xae\x65\x03\xdf\xd1\xa3\xf8\x42\x19\x4b\x35\x20\x2f\xbf\xfe\xfa\xeb\x6a\x40\xc5\xd1\x6b\xbb\xe3\x35\xbb\xfd\x54\xc9\x99\xe2\x59\x6d\x7d\xb4\x4c\xcb\xb1\xac\x2c\xc6\x27\x57\x20\x31\x81\x90\x9c\x29\x99\x27\x51\x39\xe5\x7e\x1f\x60\xd7\x9a\x53\x99\x41\x1c\xc8\x1a\xb6\x94\x45\x38\x71\x94\x45\x93\x13\xa9\xc0\x96\x75\x82\xa7\xc4\x6c\xae\x3d\x05\x4b\x93\x67\xfb\x25\x62\x3e\x6d\x0b\x58\x6f\x40\x1c\xc8\x3b\x0e\xa8\xca\xd9\x4f\xa7\x53\xbb\x3c\xd9\x9c\x45\x72\x05\x4d\xfd\x7e\x9f\xe0\x5a\xe2\xdf\x09\xea\x7a\x2b\x3e\xb9\x13\xda\x2b\x96\x75\x01\xe1\x34\x37\xe0\x58\x82\xd1\x2b\x58\xc6\xa3\x6a\x80\xd0\x6e\xb9\x7b\x0b\x09\xc6\x07\x33\x99\x8c\x45\x44\x5e\x86\x61\x58\x41\x6d\xc2\x6b\x4d\xb8\xf4\x69\x09\xe3\xf0\xa4\x78\xd8\x19\x66\x7e\x5c\xf9\xa0\x26\xdd\x2f\xa5\x2b\xb3\xbb\x5d\x8d\x15\xdb\x45\xd9\x1a\x27\x2d\xa3\x76\xca\x16\x22\x86\xb8\x58\xc8\x44\x42\x48\x87\x36\x38\x86\x81\xd9\x4e\x90\x97\x82\x22\x31\x0d\x27\x32\xda\x98\x7d\x16\x89\x25\x09\x63\x96\x65\x23\x8a\xc9\x80\x89\x84\x2b\xbb\xcf\x86\x2f\x3c\x8f\x5c\x6a\x48\x2b\x21\x24\x8e\xe5\x84\x29\xe2\x79\xb6\x0b\xde\x4b\x35\xdb\x55\x7c\x79\x11\x9f\xb2\x3c\xd6\xd6\xc4\x23\x03\x78\xd3\x38\x17\x51\x25\xd3\x94\xb2\x86\x8a\x08\xad\xc9\x80\xd4\x24\x87\xe5\x48\x6c\x56\x28\x5e\x68\x4b\x4d\xcb\xd9\x0c\x12\x07\x04\x50\xcc\x52\x70\x3d\x25\x11\xd3\xcc\x36\x23\x84\xa2\xbd\x6c\x06\xdf\x60\x7e\x7d\x59\x68\x53\xc2\x94\x60\x1e\x5f\x43\x36\x88\x78\x34\xa2\x53\x16\xa3\xac\x69\x45\xf4\x4a\xc6\xd5\x50\x0d\x68\x98\xb1\x40\xa9\x04\x93\x29\x4f\x26\xf1\x86\x8e\xaf\x0a\x38\xa0\x21\x66\x0c\x77\x11\xb8\x02\xe4\x3e\xa3\x2a\x60\x1c\xcf\x98\xff\xb3\x44\x87\x41\xb1\x94\x8d\x36\xd6\x5a\xd7\x89\x82\x25\x29\xf3\xfc\x4b\x5a\xaf\x68\x55\x21\x7b\x6f\x12\xd0\x30\x60\x35\xc7\x06\xe0\xd9\x96\x9f\x45\x54\x2d\x61\x6b\x90\xd2\x3b\x95\xfb\x9a\xee\x9f\x4a\xb5\x68\x69\x98\x26\xfb\x8c\x79\x85\x12\x70\x11\xf8\x39\xe3\x4c\x85\x73\x4a\xa0\xea\xcd\x25\x8c\x07\x5e\x6e\xfb\xab\x16\x72\x68\xc5\xc3\x74\x97\xb6\x84\x40\x4c\x24\x69\xae\x6b\x85\x88\x36\x94\x6c\x50\x50\x02\xf9\x38\xe4\x73\x19\x43\xcc\x8e\xe8\x3b\x99\x69\xf2\xe1\xfd\x8f\xb4\x2a\xb8\x51\x7b\xf4\xe6\xba\xec\x46\x77\x96\x4f\x16\x62\x3b\xd8\x44\x27\x04\xfe\xb6\xdb\xeb\x7d\x9e\xec\xf5\x5b\x80\xb0\x1a\x2d\x79\x5c\x5b\xb3\x72\xad\xe0\xab\x8d\x08\x76\x7b\xb3\x21\x16\xa5\x22\x0b\xb5\x58\x82\x33\x20\x2a\xaa\x00\xf8\x5e\x2e\x38\xba\x7a\x18\xc4\x62\xdc\x56\x6c\x48\x5e\x29\xd8\xf4\x90\xe7\xf6\x4b\x97\x29\xa5\xc4\x9f\xc7\xcf\x42\x5f\x3e\x9a\x72\xd3\x9e\x4a\x1d\x00\x72\x12\xa0\x24\x33\xa1\xe7\xf9\xc4\xb0\x90\x85\xb8\xe3\xd3\x78\x93\x24\xc1\xaf\xdb\x20\xa6\xe3\x4b\x99\xab\x90\x13\xf0\xc0\x77\x42\x7f\x9f\x4f\xf6\xc1\x6d\xc2\x2b\x9c\x88\x0b\x17\xf8\x00\x67\x1b\xbe\xdb\x39\xd5\x45\x5a\xe9\x6f\x9b\x4c\x03\x50\x36\xe4\xaa\xb6\x41\x2c\xb9\xa8\x66\xf6\x9e\x17\x64\xc3\xa6\xfc\xcc\xf7\x7d\xe2\xfe\x02\x33\xc9\x7a\x50\x19\x16\x80\x7b\x4a\xf4\x9c\xc3\xe0\x4c\xc1\xfe\x51\xec\xb7\xcd\x8b\xce\x9e\x1c\x5c\x92\x83\xe6\xce\xda\x23\x80\xd9\x82\xd4\x5f\x3c\xa8\xce\x22\xe5\x11\xb1\xd1\x60\x77\x5a\x29\xb2\x4d\x9f\x4b\x16\xe7\x3c\x91\xab\x11\x05\x2e\x51\x6f\x03\x82\x37\xa2\xcd\x16\xb6\xb6\x52\xa6\x40\x59\x1e\x5a\x90\x90\x26\xc2\x56\x1e\xd9\xbe\xda\xc7\xe6\xea\x15\x54\xa8\x59\x84\xb0\xdd\x16\x95\x2a\x4d\x1b\xbe\x51\xaf\x43\xf3\x43\x23\x07\x1b\x96\xcb\x8f\x86\x8e\x63\xc6\x9c\x1f\xd6\x45\x8e\x1b\xc0\x4c\x96\x45\x1d\x20\xeb\x49\xc2\xe3\xad\x96\xc9\xb3\x18\x4f\x5b\x99\x84\xeb\x95\x54\x77\x2d\x99\xda\xb4\xd0\x78\x6d\x28\x45\x82\xfa\x7b\xcd\x4d\x4a\xae\x88\x25\xaf\x8f\xba\x12\xe2\xd1\x5b\x67\xde\x31\xb1\x0f\x72\x3a\x85\xd3\x84\x77\xbc\xb7\x72\x21\x3c\x2d\x35\x8b\x3f\x96\x21\x46\xc7\xfd\x27\xeb\x0a\x52\x66\xac\x72\xa0\x57\x96\x81\x6c\x5f\x85\x69\x65\xbb\x7d\x28\x1f\x45\x55\xe2\xf9\x98\x72\xf5\x31\x62\x9b\xe7\xe3\x2a\x11\x91\x77\xc0\x75\xbf\x65\x9b\x27\x91\x35\x5e\xeb\x91\xf5\xe4\x26\x7a\xe6\x16\xca\xc3\x10\xf5\x9e\xb1\x77\xfe\xc7\x9d\x03\xe4\xbd\xb1\x90\xd5\x12\xd8\x53\x66\x84\x22\xbf\x77\xbe\x10\x6c\x8f\x4c\x15\x9d\xb7\x88\xbc\xa3\x66\x0c\xce\x4f\x20\x24\x52\xf2\x03\xdf\x40\xb4\x47\x10\x10\xd0\x50\xef\xd7\x0c\x0e\xaa\xc6\xb7\x77\x56\xa4\xda\x92\x45\x97\xf9\x2c\x13\x4e\x2b\x11\x98\xbe\x1d\x97\x7d\x0e\xdd\xc9\x0e\xba\x92\xb1\x5c\x86\x12\xd6\x7f\x07\x5f\xc8\x92\x25\xcb\x0c\xc0\xc5\xe6\x0c\x0e\xe1\x50\x88\x8b\x13\x32\x35\x99\x89\xcc\x39\x96\x9d\x11\x3d\x02\x07\xc0\x2e\x2e\xe4\x7f\x17\xa6\xe3\x1d\x4c\xe7\x6b\xb6\x48\x63\x5e\xdb\x46\x2d\x54\x65\x12\xcb\x50\xce\xd4\x86\x67\x44\x6f\xe3\x71\x8b\x6b\x98\x85\xb0\xb6\x9a\x64\x2a\xdc\x1e\xdb\xd9\x2d\x5b\xfb\x33\x29\x81\xb1\xb2\x54\x64\xa6\x58\x62\x1b\x14\xc1\x49\x16\xdc\xfe\x9a\x73\xb5\x09\x5e\xf9\x87\xfe\x91\x7d\x31\x47\xf6\xdb\xcc\x24\x32\x63\x6f\xfc\x98\xe9\xe7\xde\x08\xdc\xb6\x2f\x04\x9e\x65\x1d\xac\xdd\x02\xdc\x58\xe6\xd1\x34\x86\xfa\xd7\x42\x6e\x3c\x08\x96\x82\x43\xbf\xef\x1f\xda\xd7\x5d\xe3\x35\xeb\xb5\x7b\x87\x5b\x06\xae\x35\xad\xc6\x63\xd3\x3c\x09\x91\xc7\x13\x60\x94\xc0\xf0\xde\x31\x05\x0c\x0f\x4e\xc5\x2e\x32\xbd\x0e\xb9\x37\x0b\xae\xb8\xce\x55\x42\x22\x1e\xca\x88\x7f\x78\x7f\x81\xb7\x33\x70\x52\x4f\xb4\xeb\x26\x7c\x05\xb5\x7c\x76\xbe\x4e\x5d\xe7\xfa\xf5\xa7\x2f\x6f\x1c\xd2\x35\x2c\x11\xbe\x9c\x11\xbe\x38\xee\xf5\x7f\xbe\x3c\xbd\xe9\xbe\xee\xb8\x5f\x7e\x7a\xf9\xe9\xf4\xd3\x5f\x3a\x4e\xc7\xe7\x6b\x1e\xba\xb1\x0c\xcd\x21\xc2\x2f\xe8\x6d\xe7\xd3\xa7\xeb\x1e\xa5\x37\x9d\xeb\xc3\x1b\x1f\x4a\x1e\x52\x50\x37\xf8\x77\x37\x98\xf5\x88\xf3\xc5\xab\xbe\xd3\x01\x89\x24\x8f\x63\x00\xf5\x70\x50\x07\x1f\x2d\x5d\x3c\xff\xf4\x88\xe5\x93\xdf\xc2\x4b\x0b\xbc\x11\x20\xaf\xcd\x39\x89\x0c\x1a\x82\xa7\x3b\xf6\xb4\x82\x27\xa6\xb9\x0b\x8e\xeb\xc1\x89\x77\x5d\x1a\x13\x53\x6c\xf2\x63\x9e\xcc\xf4\x9c\x8c\xeb\x5d\x04\x32\x97\x22\x23\xfc\xf4\x81\xed\xe2\x66\x4f\x66\x6e\xdf\xaa\x77\x09\x05\x8a\x43\x4f\x8d\xe8\xc3\x41\x1d\x19\x48\xee\x22\xc8\x33\xae\x7e\x14\xc9\x9d\x8b\x0f\xb8\x9e\x3d\xe3\xc4\x1a\x0e\x7c\x25\xa3\x11\x71\xec\xfd\xdb\x3f\xb1\xc6\x3b\x5b\x34\xd6\x7a\x49\x18\x37\x32\xd7\x20\x65\x42\x09\x6d\x06\x14\x30\x95\xc6\x2d\x2c\xc2\xe1\x78\xd8\xb0\x7d\x91\x64\x9a\xcd\x20\x26\xde\x89\xf0\x71\xdb\xa2\x94\x32\xd6\xf7\x18\x6e\xcc\x17\x38\xf4\xee\x7c\x23\xc5\x56\xc5\x79\xcb\xbd\xcd\x64\x52\x0e\x75\xfb\x33\xee\x4b\xd7\x90\x65\x73\x72\xa1\x1d\x1f\xea\x85\x91\xf1\x21\x5e\x3b\xa7\x0d\x31\x7b\x67\x04\x42\xd9\x5c\xae\x5c\xdb\x2b\xa6\xa4\x50\xb8\x7a\x62\xc9\x2a\x33\x75\xbe\xd4\xf1\x71\xdf\xb8\x55\x48\xec\xd9\x05\xc6\xf8\x3f\xb8\x66\x18\x5c\xfe\x15\xaa\x75\x7a\xe4\xa4\xdf\xb1\x00\x6a\x96\x9b\xac\xca\xda\x7e\xd2\xe4\x59\xa1\x55\x58\xde\x35\xda\xa4\x61\xd6\x28\xb5\x93\xa4\xbb\xf2\x2d\x5e\xf4\x5c\x14\x86\x16\x95\xe9\x7c\x0f\x0c\xcb\x46\x3b\x78\xeb\xe9\xde\x57\x69\x9c\xd6\x2e\xdf\xc4\x82\xcd\x38\x1d\x10\x9a\xab\xd8\x75\x68\xf7\xe9\x31\xe7\xf9\x62\x92\x30\x11\x77\xba\xd4\xe9\x50\x6b\xf4\xa1\xd3\x8a\xd8\xb6\x83\x1f\x89\xdb\x3f\xc6\xc1\x67\x2c\xc5\x98\xfd\x63\x5d\xfc\x01\x76\xcc\x4f\x98\x73\x9f\xeb\xde\x6a\x8a\x7f\x9e\x83\x8b\x55\xc3\xeb\xf6\xdf\x69\xf3\x47\x3c\xd8\xfd\x7f\x44\xcc\x41\x33\x61\xec\x90\x71\x3b\x2f\x63\xd3\x2e\xc5\x9b\xe5\x0c\x08\x37\xf0\x6d\x5f\xcb\xbf\x89\x35\x8f\xdc\x57\x9d\x56\xe2\xf1\xeb\xb4\x18\x6c\x30\xad\x95\xeb\x34\x28\xb0\xd3\x23\x75\xa3\x67\x72\xc9\x15\x4c\x0d\x2c\xe3\x3d\x74\xa7\x75\x4f\xd3\xf8\x57\x2c\x8f\x63\x28\x9b\x33\xf8\x9c\x99\xae\xf3\x85\xf3\xf0\x79\x5b\x66\x7a\xce\x1e\x1e\xed\x74\x9f\x30\x0c\x73\x36\x96\xa7\x52\x11\x77\x09\x67\x81\x35\xe4\xe4\x02\x4d\x49\x8d\xb7\x5b\x0d\xfb\x37\x50\x0e\x53\xfc\xc9\xe7\x02\xbc\x64\x8a\xe0\xe1\x4e\x08\x54\x8c\x19\x16\x2d\x4d\x79\x12\xb9\xce\x50\xab\xf1\x50\x47\x63\xa7\xbb\xe9\x3a\x3e\x30\xe4\xc8\xbe\x36\x86\xba\x5e\xdf\x74\x9d\xa2\x33\x00\x05\xa7\xe9\xe0\x2a\x25\x5c\x1a\x16\x5a\x05\xf5\x36\x15\xec\x76\xfa\x30\xb1\x73\x16\xce\xdd\xb2\x2a\xb9\xcb\x1e\x11\x3d\xc2\xb6\x5a\x35\xe0\x15\x6d\xad\x01\x6f\xf0\x62\x63\x14\x08\x19\x9c\x81\xab\xdb\x1b\xa7\x5b\x15\xf6\xa5\xff\x26\xd7\x73\x69\x36\xbd\x0d\x0d\x4c\x5f\x9d\xae\x43\xc7\x7f\x75\xba\xf5\x6e\x9c\x27\x5e\xde\xa0\xa5\x74\x8c\x7d\x67\xc5\x0f\x5d\xd8\x91\x5a\xda\xec\x74\xf6\x87\x3a\x3a\x22\x4a\xc1\x13\xf7\x0f\xa7\x8f\xb9\xef\x12\x6c\x09\x84\xdb\xf4\x5f\x02\x5a\xcd\x7e\x58\xf4\x6b\x8a\x90\xe8\xcd\x69\x4d\x30\xdd\x2f\x68\x63\x07\x65\xad\x70\x94\x5e\x27\x37\x18\x15\x3b\x10\x43\xbd\x86\xf6\x48\x86\x39\xaa\xfb\x40\x47\xcf\x63\x8e\x8f\xdf\x6c\x2e\x22\xb7\x3a\xb7\x74\xb0\xc7\xcc\x1e\x73\xe0\xab\x88\x96\x41\x19\x04\xe4\x1b\x30\x63\xa4\xb6\xf3\x46\xb2\x37\xaa\xe6\x14\xb3\x09\xd4\x8b\x01\xb9\xa6\x57\x5c\x29\xfc\x75\xf1\x05\xed\x11\x7a\x99\x87\x77\x19\x3e\x7c\xc3\x22\xfc\xfa\x49\x6a\xf2\x9d\x94\xe6\xf9\x7c\x6e\x5a\x78\x0e\x0c\x3e\xc6\xc7\xb7\x3f\xe0\x67\xd9\x8d\x89\x8d\x5c\x68\xf3\x08\x1b\x26\xb2\xcf\x6f\x56\x1c\x2f\xb1\x5e\xd0\x9b\x5e\x39\x71\x40\x92\x71\x8d\x83\x57\xa1\x74\x5f\xdb\xa7\x06\x1a\x64\xb9\x72\xc9\x7a\xb5\x3e\xd4\x05\x3d\x24\xb9\xe9\x35\x85\xe3\xdf\x4d\x8f\xf4\xa1\xfa\x94\x0d\xc7\xed\x86\xa3\x76\xc3\xab\x76\xc3\x61\xab\xa1\xdf\x7a\x6f\xf7\xb7\x0d\xb4\x47\x68\x43\xb0\x18\x6f\xaa\x59\x3c\xd8\xa7\x9b\x83\xed\x1b\x7a\x68\xb1\x01\xaf\x19\xa7\x81\x9f\xf0\x30\x61\x9e\x5d\x88\x86\x8e\x0f\x3d\x96\xd6\xdf\x9b\xdf\x6c\x2f\x81\xd3\x7d\xa7\x44\x04\xdb\x87\xc3\x42\x9a\x1f\x33\x7a\xc0\x2a\x33\xa8\x03\x99\x58\xf2\x01\xf2\x76\x8e\x84\x5b\x98\x9b\xc9\x37\x59\xca\x43\xfd\x1e\x8f\x18\x56\xfa\x61\xcb\xf5\x57\x22\x89\xe4\xca\x97\x09\xde\x4c\xc2\xd8\xd5\x9e\x2f\xb7\x00\xa2\x83\x82\x07\x5d\xed\xa3\x91\x03\xcd\x65\xba\x41\x29\x8c\xfc\x4b\xc3\xfd\x77\x24\xb1\xcb\xa9\x68\xa8\x0b\x8a\xbb\x64\xc4\xdc\xf9\xd7\xc9\x2d\x4a\x95\xbb\xab\xad\x54\x4b\x40\xe5\x95\x6a\xc7\x9f\x42\x15\xbd\x48\xdc\x93\x7e\xbf\xd2\x2b\xe5\x70\xbb\xfc\xfd\xf2\xed\x4f\x2e\x0d\xe0\x0c\xfc\x7a\x89\x07\xee\x2e\x7c\xf6\xb6\x13\xc6\x05\xec\x34\x82\x11\x06\x7d\x81\xad\x3e\xec\x12\xa9\x9a\x7d\x8f\x02\x78\x9b\x6b\x44\xd0\xdb\x5d\xc9\x5a\x24\x6f\x59\xbe\x19\xf5\xb4\xd1\xff\xd0\x78\x7f\x38\xd8\x6d\x7f\x68\x9d\x53\xec\xca\x37\xb3\x16\x36\xbe\x9d\xdc\x82\x3b\x70\xe2\xbe\x29\x40\x95\x64\x6d\x5d\xad\x5c\x1d\x65\xeb\x14\x82\xbd\xed\x05\x35\x67\x11\x98\xf2\x1c\xb8\x90\xdb\x06\x76\x40\xca\xdf\x27\xed\x19\x7c\x18\x14\xbf\x4c\x42\xee\xc6\xff\x59\xf1\xdf\x00\x00\x00\xff\xff\x89\x48\x8e\x18\x69\x21\x00\x00")

func static_gui_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_static_gui_index_html,
		"static/gui/index.html",
	)
}

func static_gui_index_html() (*asset, error) {
	bytes, err := static_gui_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "static/gui/index.html", size: 8553, mode: os.FileMode(420), modTime: time.Unix(1429238704, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/gui/index.html": static_gui_index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"static": &_bintree_t{nil, map[string]*_bintree_t{
		"gui": &_bintree_t{nil, map[string]*_bintree_t{
			"index.html": &_bintree_t{static_gui_index_html, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

