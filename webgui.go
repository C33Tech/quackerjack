package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _static_gui_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x5a\x7b\x73\xdb\x36\x12\xff\xdf\x9f\x02\x41\xae\x25\x35\x12\x49\xf9\x35\xd3\xca\x92\x72\xa9\xeb\x6b\x7d\xed\x35\x69\xec\xdc\x5c\xc7\xe7\xcb\x40\x24\x24\xc1\xa6\x08\x16\x04\xf5\x68\xe2\xef\x7e\xbb\x20\x48\x91\x94\x1c\xbb\x37\x9d\xce\x65\xc6\x12\x01\x2c\x16\x3f\x60\x5f\x3f\x50\x19\xbe\xf8\xf6\xcd\xf9\xf5\x2f\x6f\x2f\xc8\x5c\x2f\xe2\xf1\xc1\x10\xbf\x48\xcc\x92\xd9\x88\xf2\x84\x62\x07\x67\xd1\xf8\x80\x90\xa1\x16\x3a\xe6\xe3\x9f\x73\x16\xde\x73\x75\x07\x9f\x03\xf2\x8b\xcc\xaf\xf3\x09\x27\xe7\x72\xb1\xe0\x89\x26\xaf\x13\x16\x6f\x7e\xe3\x6a\x18\x14\xc2\x07\x38\x6f\xc1\x35\x23\xe1\x9c\xa9\x8c\xeb\x11\xcd\xf5\xd4\xfb\x8a\x8e\xab\x81\xb9\xd6\xa9\xc7\x7f\xcd\xc5\x72\x44\xff\xe5\xbd\x7f\xed\x81\xae\x94\x69\x31\x89\x39\x25\xa1\x4c\x34\xe8\x1d\xd1\xcb\x8b\x11\x8f\x66\xbc\x36\x2f\x61\x0b\x3e\xa2\x4b\xc1\x57\xa9\x54\xba\x26\xba\x12\x91\x9e\x8f\x22\xbe\x14\x21\xf7\x4c\xa3\x47\x44\x22\xb4\x60\xb1\x97\x85\x2c\xe6\xa3\x43\x5a\x00\x8b\x45\x72\x4f\x14\x8f\x47\x34\xd3\x9b\x98\x67\x73\xce\x41\xd1\x5c\xf1\xe9\x88\x22\xac\x6c\x10\x04\x0b\xb6\x0e\xa3\xc4\x9f\x48\xa9\x33\xad\x58\x8a\x8d\x50\x2e\x82\xaa\x23\x38\xf6\x8f\xfd\xa3\x20\xcc\xb2\x6d\x9f\xbf\x10\x20\x95\x65\x05\x5c\xa3\x9c\xe8\x4d\x0a\x78\x35\x5f\xeb\xa0\x1c\x21\xc4\x9f\x88\x59\x92\x2f\x32\xf2\x91\x2c\x98\x9a\x89\xc4\x9b\x48\xad\xe5\x62\x40\x8e\xfa\xe9\xfa\x8c\x4c\x61\x53\x5e\x26\x7e\xe3\x03\x72\x62\x3a\x70\xbe\xc7\x62\x98\x35\x20\x21\x6c\x97\xab\x33\xf2\xd0\x54\x95\xa5\x2c\xf1\x23\x9e\x85\xa0\xb4\x36\xff\xf0\x04\xe7\x47\x22\x4b\x63\xb6\x19\x90\x49\x2c\xc3\xfb\x72\xee\xcb\x58\xb2\x48\x24\x33\x98\x51\x09\x24\x32\xe1\x67\xc4\x9c\xdf\x80\x7c\x75\xfa\xc5\x99\x45\x38\x20\xc7\x80\x84\xb0\x5c\xcb\x06\xbe\xe3\x47\xf1\x85\x32\x96\x6a\x40\x5e\x7e\xfd\xf5\xd7\xd5\x82\x8a\xa3\xd5\x76\xd7\x6b\x0e\xfb\xa9\x92\x33\xc5\xb3\xda\xf9\x68\x99\x96\x6b\x59\x59\xf4\x4f\xae\x40\x62\x02\x2e\x39\x53\x32\x4f\xa2\x72\xcb\xfd\x3e\xc0\xae\x75\xa7\x32\x03\x3f\x90\x35\x6c\x29\x8b\x70\xe3\x03\x72\xba\xd5\xe8\x83\x0d\xe5\x3d\x07\x8d\x25\xf2\xe9\x74\x6a\xb7\x96\xcd\x59\x24\x57\xd0\xd5\xef\xf7\x09\x9e\x03\xfe\x99\xb9\xde\x8a\x4f\xee\x85\xf6\x8a\x23\x59\x80\x2b\xcc\x8d\x62\x96\xa0\xe7\x09\x96\xf1\xa8\x5a\x20\xb4\xe1\x02\x98\xa5\x02\xf0\x00\x15\xd4\x64\x32\x16\x11\x79\x19\x86\xe1\x99\xed\xf7\x14\x98\x25\xcf\x70\x27\xb8\x44\x05\xb6\x68\x96\xf6\x28\x61\x1c\x9e\x16\x0f\x3b\xcb\xcc\x4f\xaa\xf3\xab\x49\xf7\x4b\xe9\x4a\xed\xee\x90\x85\x51\x3a\x65\x1b\x65\x6b\x9d\xb4\xf4\xb8\x29\x5b\x88\x18\x6c\xba\x90\x89\x04\x77\x0c\xad\x61\x87\x81\x09\x05\xc8\x29\x41\x91\x54\x86\x13\x19\x6d\x4c\x8c\x44\x62\x49\xc2\x98\x65\xd9\x88\x62\x20\x33\x91\x70\x65\x63\x64\xf8\xc2\xf3\xc8\x95\x86\x94\x10\x42\xd0\x2f\x27\x4c\x11\xcf\xb3\x43\xd0\x2e\xa7\xd9\xa1\xe2\xcb\x8b\xf8\x94\xe5\xb1\xb6\x2a\x1e\x59\xc0\x9b\xc6\xb9\x88\x2a\x99\xa6\x94\x55\x54\x78\x57\x4d\x06\xa4\x26\x39\x1c\x47\x62\x23\xba\x68\xd0\xd6\x34\x2d\x67\x33\x08\x7a\x70\xa0\x98\xa5\x60\x7a\x4a\x22\xa6\x99\xed\x46\x08\x45\x7f\xd9\x0d\xb6\xc1\xdc\xf8\xb2\x98\x4d\x09\x53\x82\x79\x7c\x0d\x91\x1c\xf1\x68\x44\xa7\x2c\x46\x59\xd3\x8b\xe8\x95\x8c\xab\xa5\x1a\xd0\x30\xdb\xc0\xa4\x12\x4c\xa6\x3c\x99\xc4\x1b\x3a\xbe\x2e\xe0\xc0\x0c\x31\x63\x18\x01\x60\x0a\x90\xfb\xcc\x54\x01\xeb\x78\x46\xfd\x9f\x25\x3a\x0c\x8a\xa3\x6c\xf4\xb1\xd6\xb9\x4e\x14\x1c\x49\x99\xa3\x5f\xd2\x7a\x35\xaa\x8a\xd0\x3b\x93\x3c\x86\x01\xab\x19\x36\x00\xcb\xb6\xec\x2c\xa2\xea\x08\x5b\x8b\x94\xd6\xa9\xcc\xd7\x34\xff\x54\xaa\x45\x6b\x86\xe9\xb2\xcf\x31\x9f\x42\x15\x01\x13\x81\x9d\x33\xce\x54\x38\xa7\x04\x2a\xd6\x5c\xc2\x7a\x60\xe5\xb6\xbd\x6a\x2e\x87\x5a\x3c\x4c\x55\x69\x4b\x08\xc4\x44\x92\xe6\xba\x56\x44\x68\x63\x92\x75\x0a\x4a\x20\x97\x86\x7c\x2e\x63\xf0\xd9\x11\x7d\x2b\x33\x4d\xde\xbf\xfb\x91\x56\xc5\x32\x6a\xaf\xde\x3c\x97\x5d\xef\xce\xf2\xc9\x42\x6c\x17\x9b\xe8\x84\xc0\xdf\x36\xbc\xde\xe5\xc9\x5e\xbb\x05\x08\xab\xd1\x93\xc7\xb5\x33\x2b\xcf\x0a\xbe\xda\x88\x20\xda\x9b\x1d\xb1\x28\x27\xb2\x50\x8b\x25\x18\x03\xbc\xa2\x72\x80\xef\xe5\x82\xa3\xa9\x87\x41\x2c\xc6\xed\x89\x0d\xc9\x6b\x05\x41\x0f\x79\x6e\xbf\x74\x99\x52\x4a\xfc\x79\xfc\x2c\xf4\xe5\xa3\x12\xb3\xf9\x8e\x69\xeb\x00\x90\x4f\x00\x9d\x98\x09\x3d\xcf\x27\x86\x41\x2c\xc4\x3d\x9f\xc6\x9b\x24\x09\x7e\xdd\x3a\x31\x1d\x5f\xc9\x5c\x85\x9c\x80\x05\xbe\x13\xfa\xfb\x7c\xb2\x0f\x6e\x13\x5e\x61\x44\x3c\xb8\xc0\x07\x38\x5b\xf7\xdd\xee\xa9\x2e\xd2\x4a\x7f\xdb\x64\x1a\xc0\x64\x43\x8c\x6a\x01\x62\x89\x41\xb5\xb3\x77\xbc\x20\x0a\x36\xe5\x67\xbe\xef\x13\xf7\x17\xd8\x49\xd6\x83\xca\xb0\x00\xdc\x53\xa2\xe7\x1c\x16\x67\x0a\xe2\x47\xb1\xdf\x36\x2f\x3a\x7b\x72\x70\x59\xd8\x9b\x91\xb5\x47\x00\xb3\x05\xa9\x37\x3c\xa8\xce\x22\xe5\x11\xb1\xde\x60\x23\xad\x14\xd9\xa6\xcf\x25\x8b\x73\x9e\xc8\xd5\x88\x02\x0f\xa8\xf7\x01\x39\x1b\xd1\x66\x0f\x5b\x5b\x29\x53\xa0\x2c\x87\x2c\x08\x44\x13\x61\x2b\x8f\x6c\x9b\xf6\xb1\x79\x7a\x05\x8d\x69\x16\x21\xec\xb7\x45\xa5\x4a\xd3\x86\x6f\xd4\xeb\xd0\xfc\xd0\xc8\x41\xc0\x72\xf9\xc1\x50\x69\xcc\x98\xf3\xc3\xba\xc8\x49\x03\x98\xc9\xb2\x38\x07\x88\x76\x92\xf0\x78\x3b\xcb\xe4\x59\xf4\xa7\xad\x4c\xc2\xf5\x4a\xaa\xfb\x96\x4c\x6d\x5b\xa8\xbc\xb6\x94\x22\x41\xbd\x5d\x33\x93\x92\x2b\x62\x89\xe7\xa3\xa6\x04\x7f\xf4\xd6\x99\x77\x42\xec\x83\x9c\x4e\xe1\x26\xe0\x9d\xec\xad\x5c\x08\x4f\x4b\xcd\xe2\x0f\xa5\x8b\xd1\x71\xff\xc9\xba\x82\x74\x17\xab\x1c\xcc\x2b\xcb\x40\xb6\xaf\xc2\xb4\xb2\xdd\x3e\x94\x8f\xa2\x2a\xf1\x7c\x48\xb9\xfa\x10\xb1\xcd\xf3\x71\x95\x88\xc8\x5b\xe0\xa9\xdf\xb2\xcd\x93\xc8\x1a\xcd\xba\x67\x3d\x19\x44\xcf\x0c\xa1\x3c\x0c\x71\xde\x33\x62\xe7\x7f\x8c\x1c\x20\xde\x8d\x83\xac\x8e\xc0\xde\x10\x23\x14\xf9\xbd\xfb\x05\x67\x7b\x64\xab\x68\xbc\x45\xe4\x1d\x37\x7d\x70\x7e\x0a\x2e\x91\x92\x1f\xf8\x06\xbc\x3d\x02\x87\x80\x8e\xfa\xb8\x66\x70\xc9\x34\xb6\xbd\xb7\x22\x55\x48\x16\x43\xe6\xb3\x4c\x38\xad\x44\x60\xc6\x76\x4c\xf6\x39\x74\xa7\x3b\xe8\x4a\xc6\x72\x15\x4a\x38\xff\x1d\x7c\x21\x4b\x96\x2c\x33\x00\x17\x9b\x73\xb8\x40\x43\x21\x2e\x6e\xb7\xd4\x64\x26\x32\xe7\x58\x76\x46\xf4\x18\x0c\x00\x51\x5c\xc8\xff\x2e\x4c\x27\x3b\x98\x2e\xd6\x6c\x91\xc6\xbc\x16\x46\x2d\x54\x65\x12\xcb\x50\xce\xd4\x86\x67\x78\x6f\xe3\x71\x8b\x6b\x98\x85\x70\xb6\x9a\x64\x2a\xdc\x5e\xb9\xd9\x1d\x5b\xfb\x33\x29\x81\xb1\xb2\x54\x64\xa6\x58\x62\x1f\x14\xc1\x49\x16\xdc\xfd\x9a\x73\xb5\x09\x8e\xfc\x43\xff\xd8\x36\xcc\x75\xfb\x2e\x33\x89\xcc\xe8\x1b\x3f\xa6\xfa\xb9\xb7\xf9\xbb\xf6\x65\xfe\x59\xda\x41\xdb\x1d\xc0\x8d\x65\x1e\x4d\x63\xa8\x7f\x2d\xe4\xc6\x82\xa0\x29\x38\xf4\xfb\xfe\xa1\x6d\xee\x2a\xaf\x69\xaf\xbd\x33\xb8\x63\x60\x5a\xd3\x6b\x2c\x36\xcd\x93\x10\x79\x3c\x01\x46\x09\x0c\xef\x2d\x53\xc0\xf0\xe0\x46\xeb\x22\xd3\xeb\x90\x8f\xe6\xc0\x15\xd7\xb9\x4a\x48\xc4\x43\x19\xf1\xf7\xef\x2e\xf1\xcd\x0a\xdc\xb2\x13\xed\xba\x09\x5f\x41\x2d\x9f\x5d\xac\x53\xd7\xb9\x79\xf5\xe9\xcb\x5b\x87\x74\x0d\x4b\x84\x2f\x67\x84\x0d\xc7\xbd\xf9\xcf\x97\x67\xb7\xdd\x57\x1d\xf7\xcb\x4f\x2f\x3f\x9d\x7d\xfa\x4b\xc7\xe9\xf8\x7c\xcd\x43\x37\x96\xa1\xb9\x44\xf8\x05\xbd\xed\x7c\xfa\x74\xd3\xa3\xf4\xb6\x73\x73\x78\xeb\x43\xc9\x43\x0a\xea\x06\xff\xee\x06\xb3\x1e\x71\xbe\x38\xea\x3b\x1d\x90\x48\xf2\x38\x06\x50\x0f\x07\x75\xf0\xd1\xd2\xc5\xfb\x4f\x8f\x58\x3e\xf9\x2d\x34\x5a\xe0\x8d\x00\x79\x65\xee\x49\x64\xd0\x10\x3c\xdb\xd1\xa7\x15\x3c\x31\xcd\x5d\x30\x5c\x0f\x6e\xbc\xeb\x52\x99\x98\x62\x97\x1f\xf3\x64\xa6\xe7\x64\x5c\x1f\x22\x90\xb9\x14\x19\xe1\xa7\x0f\x6c\x17\x83\x3d\x99\xb9\x7d\x3b\xbd\x4b\x28\x50\x1c\x7a\x66\x44\x1f\x0e\xea\xc8\x40\x72\x17\x41\x9e\x71\xf5\xa3\x48\xee\x5d\x7c\xc0\xf3\xec\x19\x23\xd6\x70\x60\x93\x8c\x46\xc4\xb1\xef\xce\xfe\x89\x35\xde\xd9\xa2\xb1\xda\x4b\xc2\xb8\x91\xb9\x06\x29\xe3\x4a\xa8\x33\xa0\x80\xa9\x54\x6e\x61\x11\x0e\xd7\xc3\x86\xee\xcb\x24\xd3\x6c\x06\x3e\xf1\x56\x84\x8f\xeb\x16\xa5\x94\xd1\xbe\x47\x71\x63\xbf\xc0\xa1\x77\xf7\x1b\x29\xb6\x2a\xee\x5b\xee\x5d\x26\x93\x72\xa9\xbb\x9f\x31\x2e\x5d\x43\x96\xcd\xcd\x85\x76\x7c\xa8\x17\x46\xc6\x07\x7f\xed\x9c\x35\xc4\xec\xfb\x1e\x10\xca\xe6\x72\xe5\xda\x51\x31\x25\xc5\x84\xeb\x27\x8e\xac\x52\x53\xe7\x4b\x1d\x1f\xe3\xc6\xad\x5c\x62\x4f\x14\x18\xe5\xff\xe0\x9a\xa1\x73\xf9\xd7\x38\xad\xd3\x23\xa7\xfd\x8e\x05\x50\xd3\xdc\x64\x55\x56\xf7\x93\x2a\xcf\x8b\x59\x85\xe6\x5d\xa5\x4d\x1a\x66\x95\x52\xbb\x49\xba\x2b\xdf\xe2\x45\xcf\x45\x61\x68\x51\x99\xce\xf7\xc0\xb0\x6c\xb4\x83\x6f\x2c\xdd\x8f\x55\x1a\xa7\xb5\x17\x67\x62\xc1\x66\x9c\x0e\x08\xcd\x55\xec\x3a\xb4\xfb\xf4\x9a\xf3\x7c\x31\x49\x98\x88\x3b\x5d\xea\x74\xa8\x55\xfa\xd0\x69\x79\x6c\xdb\xc0\x8f\xf8\xed\x1f\x63\xe0\x73\x96\xa2\xcf\xfe\xb1\x26\x7e\x0f\x11\xf3\x13\xe6\xdc\xe7\x9a\xb7\xda\xe2\x9f\x67\xe0\xe2\xd4\xf0\x55\xf9\xef\xd4\xf9\x23\x5e\xec\xfe\x3f\x3c\xe6\xa0\x99\x30\x76\xc8\xb8\xdd\x97\xd1\x69\x8f\xe2\xf5\x72\x06\x84\x1b\xf8\xb6\xaf\xe5\xdf\xc4\x9a\x47\xee\x51\xa7\x95\x78\xfc\x3a\x2d\x06\x1d\x4c\x6b\xe5\x3a\x0d\x0a\xec\xf4\x48\x5d\xe9\xb9\x5c\x72\x05\x5b\x03\xcd\xf8\x0e\xb9\xd3\x7a\x4f\xd3\xf8\x57\x1c\x8f\x63\x28\x9b\x33\xf8\x9c\x9a\xae\xf3\x85\xf3\xf0\x79\x5d\x66\x7b\xce\x1e\x1e\xed\x74\x9f\x50\x0c\x7b\x36\x9a\xa7\x52\x11\x77\x09\x77\x81\x35\xe4\xe4\x02\x4d\x49\x8d\xb7\xa1\x86\xe3\x1b\x28\x87\x29\xfe\x5c\x73\x09\x56\x32\x45\xf0\x70\xc7\x05\x2a\xc6\x0c\x87\x96\xa6\x3c\x89\x5c\x67\xa8\xd5\x78\xa8\xa3\xb1\xd3\xdd\x74\x1d\x1f\x18\x72\x64\x9b\x8d\xa5\x6e\xd6\xb7\x5d\xa7\x18\x0c\x60\x82\xd3\x34\x70\x95\x12\xae\x0c\x0b\xad\x9c\x7a\x9b\x0a\x76\x07\x7d\xd8\xd8\x05\x0b\xe7\x6e\x59\x95\xdc\x65\x8f\x88\x1e\x61\xdb\x59\x35\xe0\x15\x6d\xad\x01\x6f\xf0\x62\xa3\x14\x08\x19\xdc\x81\xab\xb7\x37\x4e\xb7\x2a\xec\x4b\xff\x75\xae\xe7\xd2\x04\xbd\x75\x0d\x4c\x5f\x9d\xae\x43\xc7\x7f\x75\xba\xf5\x61\xdc\x27\xbe\xbc\x41\x4d\xe9\x18\xc7\xce\x8b\x1f\xa9\x70\x20\xb5\xb4\xd9\xe9\xec\x77\x75\x34\x44\x94\x82\x25\x3e\x3e\x9c\x3d\x66\xbe\x2b\xd0\x25\x10\x6e\xd3\x7e\x09\xcc\x6a\x8e\xc3\xa1\xdf\x50\x84\x44\x6f\xcf\x6a\x82\xe9\x7e\x41\xeb\x3b\x28\x6b\x85\xa3\xf4\x26\xb9\x45\xaf\xd8\x81\x18\xea\x35\xf4\x47\x32\xcc\x71\xba\x0f\x74\xf4\x22\xe6\xf8\xf8\xcd\xe6\x32\x72\xab\x7b\x4b\x07\x47\xcc\xee\x31\x07\x1e\x45\xb4\x74\xca\x20\x20\xdf\x80\x1a\x23\xb5\xdd\x37\x92\xbd\x51\xb5\xa7\x98\x4d\xa0\x5e\x0c\xc8\x0d\xbd\xe6\x4a\xe1\x2f\x83\x2f\x68\x8f\xd0\xab\x3c\xbc\xcf\xf0\xe1\x1b\x16\xe1\xd7\x4f\x52\x93\xef\xa4\x34\xcf\x17\x73\xd3\xc3\x73\x60\xf0\x31\x3e\xbe\xf9\x01\x3f\xcb\x61\x4c\x6c\xe4\x52\x9b\x47\x08\x98\xc8\x3e\xbf\x5e\x71\x7c\x89\xf5\x82\xde\xf6\xca\x8d\x03\x92\x8c\x6b\x5c\xbc\x72\xa5\x8f\xb5\x38\x35\xd0\x20\xcb\x95\x47\xd6\xab\x8d\xe1\x5c\x98\x87\x24\x37\xbd\xa1\x70\xfd\xbb\xed\x91\x3e\x54\x9f\xb2\xe3\xa4\xdd\x71\xdc\xee\x38\x6a\x77\x1c\xb6\x3a\xfa\xad\x76\x7b\xbc\xad\xa0\xbd\x42\x1b\x82\xc5\x78\x5b\xed\xe2\xc1\x3e\xdd\x1e\x6c\x5b\x68\xa1\xc5\x06\xac\x66\x8c\x06\x76\xc2\xcb\x84\x79\x76\xc1\x1b\x3a\x3e\x8c\x58\x5a\xff\xd1\xfc\xde\x7a\x05\x9c\xee\x3b\x25\x22\x08\x1f\x0e\x07\x69\x7e\xcc\xe8\x01\xab\xcc\xa0\x0e\x64\x62\xc9\x07\xc8\xdb\x39\x12\x6e\x61\xde\x4c\xbe\xce\x52\x1e\xea\x77\x78\xc5\xb0\xd2\x0f\x5b\xae\xbf\x12\x49\x24\x57\xbe\x4c\xf0\xcd\x24\xac\x5d\xc5\x7c\x19\x02\x88\x0e\x0a\x1e\x0c\xb5\xaf\x46\x0e\x74\x97\xe9\x06\xa5\xd0\xf3\xaf\x0c\xf7\xdf\x91\xc4\x21\xa7\xa2\xa1\x2e\x4c\xdc\x25\x23\xe6\x9d\x7f\x9d\xdc\xa2\x54\x19\x5d\xed\x49\xb5\x04\x54\xbe\x52\xed\xf8\x53\xa8\xa2\x97\x89\x7b\xda\xef\x57\xf3\x4a\x39\x0c\x97\xbf\x5f\xbd\xf9\xc9\xa5\x01\xdc\x81\x5f\x2d\xf1\xc2\xdd\x85\xcf\xde\x76\xc3\x78\x80\x9d\x86\x33\xc2\xa2\x2f\xb0\xd7\x87\x28\x91\xaa\x39\xf6\x28\x80\x37\xb9\x46\x04\xbd\xdd\x93\xac\x79\xf2\x96\xe5\x9b\x55\xcf\x1a\xe3\x0f\x8d\xf6\xc3\xc1\x6e\xff\x43\xeb\x9e\x62\x4f\xbe\x99\xb5\xb0\xf3\xcd\xe4\x0e\xcc\x81\x1b\xf7\x4d\x01\xaa\x24\x6b\xe7\x6a\xe5\xea\x28\x5b\xb7\x10\x1c\x6d\x1f\xa8\xb9\x8b\xc0\x96\xe7\xc0\x85\xdc\x36\xb0\x03\x52\xfe\x3e\x69\xef\xe0\xc3\xa0\xf8\x65\x12\x72\x37\xfe\xaf\x88\xff\x06\x00\x00\xff\xff\xf5\xeb\x7f\x92\x25\x21\x00\x00")

func static_gui_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_static_gui_index_html,
		"static/gui/index.html",
	)
}

func static_gui_index_html() (*asset, error) {
	bytes, err := static_gui_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "static/gui/index.html", size: 8485, mode: os.FileMode(420), modTime: time.Unix(1429226836, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/gui/index.html": static_gui_index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"static": &_bintree_t{nil, map[string]*_bintree_t{
		"gui": &_bintree_t{nil, map[string]*_bintree_t{
			"index.html": &_bintree_t{static_gui_index_html, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

