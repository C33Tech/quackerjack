package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _static_gui_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x5a\xff\x73\xdb\xb6\x92\xff\xdd\x7f\x05\x82\x5c\x4b\x72\x24\x92\xf2\xb7\x99\x56\x96\x94\x4b\x5d\x5f\x9b\x6b\xaf\x49\x63\xe7\xe6\x75\xfc\xfc\x32\x10\x09\x89\xb0\x29\x82\x25\x41\x7d\xa9\xe3\xff\xfd\xed\x82\x20\x45\x52\x72\xec\xbc\xe9\x74\x9a\x99\x48\xe4\x62\x77\xf1\xc1\xee\x62\xb1\x0b\x79\xf4\xe2\xfb\xb7\xe7\x57\xbf\xbd\xbb\x20\x91\x5a\xc4\x93\x83\x11\x7e\x91\x98\x25\xf3\x31\xe5\x09\x45\x02\x67\xe1\xe4\x80\x90\x91\x12\x2a\xe6\x93\x5f\x0b\x16\xdc\xf1\xec\x16\x3e\x87\xe4\x37\x59\x5c\x15\x53\x4e\xce\xe5\x62\xc1\x13\x45\x5e\x27\x2c\xde\xfc\xc1\xb3\x91\x5f\x32\x1f\xa0\xdc\x82\x2b\x46\x82\x88\x65\x39\x57\x63\x5a\xa8\x99\xfb\x0d\x9d\xd4\x03\x91\x52\xa9\xcb\x7f\x2f\xc4\x72\x4c\xff\xe1\x7e\x78\xed\x82\xae\x94\x29\x31\x8d\x39\x25\x81\x4c\x14\xe8\x1d\xd3\x37\x17\x63\x1e\xce\x79\x43\x2e\x61\x0b\x3e\xa6\x4b\xc1\x57\xa9\xcc\x54\x83\x75\x25\x42\x15\x8d\x43\xbe\x14\x01\x77\xf5\x4b\x9f\x88\x44\x28\xc1\x62\x37\x0f\x58\xcc\xc7\x87\xb4\x04\x16\x8b\xe4\x8e\x64\x3c\x1e\xd3\x5c\x6d\x62\x9e\x47\x9c\x83\xa2\x28\xe3\xb3\x31\x45\x58\xf9\xd0\xf7\x17\x6c\x1d\x84\x89\x37\x95\x52\xe5\x2a\x63\x29\xbe\x04\x72\xe1\xd7\x04\xff\xd8\x3b\xf6\x8e\xfc\x20\xcf\xb7\x34\x6f\x21\x80\x2b\xcf\x4b\xb8\x5a\x39\x51\x9b\x14\xf0\x2a\xbe\x56\x7e\x35\x42\x88\x37\x15\xf3\xa4\x58\xe4\xe4\x9e\x2c\x58\x36\x17\x89\x3b\x95\x4a\xc9\xc5\x90\x1c\x0d\xd2\xf5\x19\x99\xc1\xa2\xdc\x5c\xfc\xc1\x87\xe4\x44\x13\x50\xde\x65\x31\x48\x0d\x49\x00\xcb\xe5\xd9\x19\x79\x68\xab\xca\x53\x96\x78\x21\xcf\x03\x50\xda\x90\x3f\x3c\x41\xf9\x50\xe4\x69\xcc\x36\x43\x32\x8d\x65\x70\x57\xc9\xbe\x8c\x25\x0b\x45\x32\x07\x89\x9a\x21\x91\x09\x3f\x23\xda\x7e\x43\xf2\xcd\xe9\x57\x67\x06\xe1\x90\x1c\x03\x12\xc2\x0a\x25\x5b\xf8\x8e\x1f\xc5\x17\xc8\x58\x66\x43\xf2\xf2\xdb\x6f\xbf\xad\x27\xcc\x38\x7a\x6d\x77\xbe\xf6\xb0\x97\x66\x72\x9e\xf1\xbc\x61\x1f\x25\xd3\x6a\x2e\xc3\x8b\xf1\xc9\x33\xe0\x98\x42\x48\xce\x33\x59\x24\x61\xb5\xe4\xc1\x00\x60\x37\xc8\xa9\xcc\x21\x0e\x64\x03\x5b\xca\x42\x5c\x38\xf2\xa2\xca\xa9\xcc\x40\x97\x71\x82\x9b\x89\x79\xa4\xdc\x0c\x4c\x53\xe4\xfb\x39\x62\x3e\xeb\x32\x18\x6f\x40\x1c\xc8\x3b\x0e\xa8\xaa\xd5\xcf\x66\x33\x63\x9e\x3c\x62\xa1\x5c\x01\x69\x30\x18\x10\xb4\x25\xfe\x3f\x45\x59\x77\xc5\xa7\x77\x42\xb9\xa5\x59\x17\x10\x4e\x91\x06\xc7\x12\x8c\x5e\xc1\x72\x1e\xd6\x13\x04\x66\xcb\xdd\x1b\x48\x30\x3f\xa8\xc9\x65\x2c\x42\xf2\x32\x08\x82\x1a\x6a\x1b\x5e\x67\xc1\x95\x4f\x2b\x18\x87\xa7\xe5\xc3\xce\x34\xd1\x49\xed\x83\x06\xf7\xa0\xe2\xae\xd5\xee\x0e\xb5\x2c\xb6\x8b\xb2\x33\x4f\x5a\x45\xed\x8c\x2d\x44\x0c\x71\xb1\x90\x89\x84\x90\x0e\x4c\x70\x8c\x7c\xbd\x9d\x20\x2f\xf9\x65\x62\x1a\x4d\x65\xb8\xd1\xfb\x2c\x14\x4b\x12\xc4\x2c\xcf\xc7\x14\x93\x01\x13\x09\xcf\xcc\x3e\x1b\xbd\x70\x5d\x72\xa9\x20\xad\x04\x90\x38\x96\x53\x96\x11\xd7\x35\x43\xf0\x5e\x89\x99\xa1\xf2\xcb\x0d\xf9\x8c\x15\xb1\x32\x2a\x1e\x99\xc0\x9d\xc5\x85\x08\x6b\x9e\x36\x97\x51\x54\x46\x68\x83\x07\xb8\xa6\x05\x98\x23\x31\x59\xa1\x7c\xa1\x1d\x31\x25\xe7\x73\x48\x1c\x10\x40\x31\x4b\xc1\xf5\x94\x84\x4c\x31\x43\x46\x08\x25\xbd\x22\x83\x6f\x30\xbf\xbe\x2c\xa5\x29\x61\x99\x60\x2e\x5f\x43\x36\x08\x79\x38\xa6\x33\x16\x23\xaf\xa6\x22\xfa\x4c\xc6\xf5\x54\x2d\x68\x98\xb1\x40\xa8\x02\x93\x67\xae\x4c\xe2\x0d\x9d\x5c\x95\x70\x40\x42\xcc\x19\xee\x22\x70\x05\xf0\x7d\x46\x54\xc0\x3c\xae\x56\xff\x57\xb1\x8e\xfc\xd2\x94\x2d\x1a\xeb\xd8\x75\x9a\x81\x49\xaa\x3c\xff\x92\x36\x4f\xb4\xfa\x20\x7b\xaf\x13\xd0\xc8\x67\x0d\xc7\xfa\xe0\xd9\x8e\x9f\x45\x58\x9b\xb0\x33\x49\xe5\x9d\xda\x7d\x6d\xf7\xcf\x64\xb6\xe8\x48\x68\x92\x79\xc6\xbc\x42\x09\xb8\x08\xfc\x9c\x73\x96\x05\x11\x25\x70\xea\x45\x12\xe6\x03\x2f\x77\xfd\xd5\x08\x39\xd4\xe2\x62\xba\x4b\x3b\x4c\xc0\x26\x92\xb4\x50\x8d\x83\x88\xb6\x84\x4c\x50\x50\x02\xf9\x38\xe0\x91\x8c\x21\x66\xc7\xf4\x9d\xcc\x15\xf9\xf0\xfe\x67\x5a\x1f\xb8\x61\x77\xf6\xb6\x5d\x76\xa3\x3b\x2f\xa6\x0b\xb1\x9d\x6c\xaa\x12\x02\xff\xb7\xdb\xeb\x7d\x91\xec\xf5\x9b\x8f\xb0\x5a\x94\x22\x6e\xd8\xac\xb2\x15\x7c\x75\x11\xc1\x6e\x6f\x13\x62\x51\x09\xb2\x40\x89\x25\x38\x03\xa2\xa2\x0e\x80\x1f\xe5\x82\xa3\xab\x47\x7e\x2c\x26\x5d\xc1\x16\xe7\x55\x06\x9b\x1e\xf2\xdc\x7e\xee\x2a\xa5\x54\xf8\x8b\xf8\x59\xe8\xab\x47\x7d\xdc\x74\x97\xd2\x04\x80\x35\x09\x94\x24\x73\xa1\xa2\x62\xaa\xab\x90\x85\xb8\xe3\xb3\x78\x93\x24\xfe\xef\xdb\x20\xa6\x93\x4b\x59\x64\x01\x27\xe0\x81\x1f\x84\xfa\xb1\x98\xee\x83\xdb\x86\x57\x3a\x11\x0d\xe7\x7b\x00\x67\x1b\xbe\xdb\x35\x35\x59\x3a\xe9\x6f\x9b\x4c\x7d\x10\xd6\xc5\x55\x63\x83\x98\xe2\xa2\x5e\xd9\x7b\x5e\x16\x1b\x26\xe5\xe7\x9e\xe7\x11\xfb\x37\x58\x49\xde\x87\x93\x61\x01\xb8\x67\x44\x45\x1c\x26\x67\x19\xec\x9f\x8c\xfd\xb1\x79\xe1\xec\xc9\xc1\x55\x71\xd0\xde\x59\x7b\x18\x30\x5b\x90\xe6\x8b\x0b\xa7\xb3\x48\x79\x48\x4c\x34\x98\x9d\x56\xb1\x6c\xd3\xe7\x92\xc5\x05\x4f\xe4\x6a\x4c\xa1\x96\x68\xd2\xa0\xc0\x1b\xd3\x36\x85\xad\x0d\x97\x3e\xa0\x4c\x1d\x5a\x16\x21\x6d\x84\x9d\x3c\xb2\x7d\x35\x8f\x6d\xeb\x95\xa5\x50\xfb\x10\x42\xba\x39\x54\xea\x34\xad\xeb\x8d\xe6\x39\x14\x1d\x6a\x3e\xd8\xb0\x5c\x7e\xd4\xe5\x38\x66\xcc\xe8\xb0\xc9\x72\xd2\x02\xa6\xb3\x2c\xca\x40\xb1\x9e\x24\x3c\xde\x4a\xe9\x3c\x8b\xf1\xb4\xe5\x49\xb8\x5a\xc9\xec\xae\xc3\xd3\x58\x16\x2a\x6f\x4c\x95\x11\xbf\xf9\xde\x70\x53\x26\x57\xc4\x14\xaf\x8f\xba\x12\xe2\xd1\x5d\xe7\xee\x09\x31\x0f\x72\x36\x83\x6e\xc2\x3d\xd9\x7b\x72\x21\x3c\x25\x15\x8b\x3f\x56\x21\x46\x27\x83\x27\xcf\x15\x2c\x99\xf1\x94\x03\xb9\xea\x18\xc8\xf7\x9d\x30\x9d\x6c\xb7\x0f\xe5\xa3\xa8\x2a\x3c\x1f\x53\x9e\x7d\x0c\xd9\xe6\xf9\xb8\x2a\x44\xe4\x1d\xd4\xba\xdf\xb3\xcd\x93\xc8\x5a\xaf\xcd\xc8\x7a\x72\x13\x3d\x73\x0b\x15\x41\x80\x72\xcf\xd8\x3b\xff\xe1\xce\x81\xe2\xbd\x65\xc8\xda\x04\xa6\xcb\x0c\x91\xe5\x4b\xd7\x0b\xc1\xf6\xc8\x52\xd1\x79\x8b\xd0\x3d\x6e\xc7\x60\x74\x0a\x21\x91\x92\x9f\xf8\x06\xa2\x3d\x84\x80\x00\x42\x73\x5c\x31\x68\x54\xb5\x6f\xef\x0c\x4b\xbd\x25\xcb\x21\xfd\x59\x25\x9c\x4e\x22\xd0\x63\x3b\x2e\xfb\x1c\xba\xd3\x1d\x74\x55\xc5\x72\x19\x48\xb0\xff\x0e\xbe\x80\x25\x4b\x96\x6b\x80\x8b\xcd\x39\x34\xe1\x70\x10\x97\x1d\x32\xd5\x99\x89\x44\x1c\x8f\x9d\x31\x3d\x06\x07\xc0\x2e\x2e\xf9\xbf\x08\xd3\x49\x17\x93\x9e\x2d\x67\x8b\x14\x1a\xec\xf9\xc7\xaa\xfa\xbd\x58\x23\x85\x37\xf6\x56\x07\x6a\x95\xd9\x2a\x49\x84\xf3\x64\x48\xb7\x1e\xb7\x60\x47\x79\x00\x06\x57\x24\xcf\x82\x6d\x2f\xcf\x6e\xd9\xda\x9b\x4b\x09\x65\x2c\x4b\x45\xae\x4f\x50\xa4\xc1\xc9\x38\xcd\xfd\xdb\xdf\x0b\x9e\x6d\xfc\x23\xef\xd0\x3b\x36\x2f\xba\x8f\xbf\xcd\x75\x76\xd3\xfa\x26\x8f\xa9\x7e\xee\x35\xc1\x6d\xf7\x96\xe0\x59\xda\x41\xdb\x2d\xc0\x8d\x65\x11\xce\x62\x38\x14\x3b\xc8\xb5\x5b\x41\x93\x7f\xe8\x0d\xbc\x43\xf3\xba\xab\xbc\xa1\xbd\x71\x19\x71\xcb\xc0\xdf\x9a\xaa\xdd\x38\x2b\x92\x00\x8b\x7b\x02\x65\x26\x94\x7d\xef\x58\x06\x65\x1f\xb4\xca\x36\x96\x7f\x0e\xb9\xd7\x06\xcf\xb8\x2a\xb2\x84\x84\x3c\x90\x21\xff\xf0\xfe\x0d\x5e\xd9\x40\xfb\x9e\x28\xdb\x4e\xf8\x0a\x0e\xf8\xf9\xc5\x3a\xb5\xad\xeb\x57\x9f\xbe\xbe\xb1\x48\x4f\x97\x8e\xf0\x65\x8d\xf1\xc5\xb2\xaf\xff\xf5\xf5\xd9\x4d\xef\x95\x63\x7f\xfd\xe9\xe5\xa7\xb3\x4f\xff\xe5\x58\x8e\xc7\xd7\x3c\xb0\x63\x19\xe8\xce\xc2\x2b\x6b\x5e\xe7\xd3\xa7\xeb\x3e\xa5\x37\xce\xf5\xe1\x8d\x07\xe7\x20\xd6\xa5\xb6\xff\xcf\x9e\x3f\xef\x13\xeb\xab\xa3\x81\xe5\x00\x47\x52\xc4\x31\x80\x7a\x38\x68\x82\x0f\x97\x36\x36\x45\x7d\x62\x8a\xcc\xef\xe1\xa5\x03\x5e\x33\x90\x57\xba\x79\x22\xc3\x16\xe3\xd9\x8e\x3e\x95\xc1\x13\x53\xdc\x06\xc7\xf5\xa1\x0d\x5e\x57\xca\xc4\x0c\x49\x5e\xcc\x93\xb9\x8a\xc8\xa4\x39\x44\x20\x9d\x65\x64\x8c\x9f\x1e\x94\xc0\x98\x01\x92\xb9\x3d\x30\xe2\x3d\x42\xa1\xee\xa1\x67\x9a\xf5\xe1\xa0\x89\x0c\x38\x77\x11\x14\x39\xcf\x7e\x16\xc9\x9d\x8d\x0f\x68\xcf\xbe\x76\x62\x03\x07\xbe\x92\xf1\x98\x58\xe6\x52\xee\xff\xf1\xe0\xb7\xb6\x68\x8c\xf6\xaa\x8a\xdc\xc8\x42\x01\x97\x0e\x25\xd4\xe9\x53\xc0\x54\x29\x37\xb0\x08\x87\x9e\xb1\xa5\xfb\x4d\x92\x2b\x36\x87\x98\x78\x27\x82\xc7\x75\x8b\x8a\x4b\x6b\xdf\xa3\xb8\xb5\x5e\x28\xac\x77\xd7\x1b\x66\x6c\x55\x36\x61\xf6\x6d\x2e\x93\x6a\xaa\xdb\x5f\x71\x5f\xda\xba\x82\xd6\xed\x0c\x75\x3c\x38\x44\x34\x8f\x07\xf1\xea\x9c\xb5\xd8\xcc\x45\x12\x30\xe5\x91\x5c\xd9\x66\x54\xcc\x48\x29\x70\xf5\x84\xc9\x6a\x35\xcd\x22\xca\xf1\x70\xdf\xd8\x75\x48\xec\xd9\x05\x5a\xf9\xff\x71\xc5\x30\xb8\xbc\x2b\x14\x73\xfa\xe4\x74\xe0\x18\x00\x0d\xcd\xed\x52\xcb\xe8\x7e\x52\xe5\x79\x29\x55\x6a\xde\x55\xda\xae\xcd\x8c\x52\x6a\x16\x49\x77\xf9\x3b\xc5\xd2\x73\x51\xe8\x5a\xa9\x4a\xe7\x7b\x60\x98\xcc\xef\xe0\x55\xa8\x7d\x5f\xa7\x71\xda\xb8\x91\x13\x0b\x36\xe7\x74\x48\x68\x91\xc5\xb6\x45\x7b\x4f\xcf\x19\x15\x8b\x69\xc2\x44\xec\xf4\xa8\xe5\x50\xa3\xf4\xc1\xe9\x44\x6c\xd7\xc1\x8f\xc4\xed\x9f\xe3\xe0\x73\x96\x62\xcc\xfe\xb9\x2e\xfe\x00\x3b\xe6\x17\xcc\xb9\xcf\x75\x6f\xbd\xc4\xbf\xce\xc1\xa5\xd5\xf0\x0e\xfe\x0b\x75\xfe\x8c\xdd\xde\xdf\x23\x62\x0e\xda\x09\x63\xa7\x42\x37\xeb\xd2\x3a\x8d\x29\x5e\x2f\xe7\x50\x85\x43\x11\xee\x29\xf9\x3f\x62\xcd\x43\xfb\xc8\xe9\x24\x1e\xaf\x59\x2b\x83\x0e\xa6\x54\x66\x5b\xad\xba\xd8\xea\x93\xa6\xd2\x73\xb9\xe4\x19\x2c\x0d\x34\xe3\xe5\xb4\xd3\xb9\xbc\x69\xfd\x2b\xcd\x63\xe9\x3a\xce\x1a\x7e\x4e\x4d\xcf\xfa\xca\x7a\xf8\xbc\x2e\xbd\x3c\x6b\x4f\x71\x6d\xf5\x9e\x50\x0c\x6b\xd6\x9a\x7d\x9f\x5c\xe2\x75\x3d\x34\xed\xc4\x54\xc1\x24\x16\xb9\xd2\x83\x39\x8c\xe8\x42\x78\x4c\xae\x6f\x34\x65\x26\x33\x62\x2f\xa1\x9f\x58\x43\x0a\x2f\xc1\x57\xe5\x75\xe3\xec\x34\x62\x5e\x5a\xe4\x91\x7d\xbd\xee\xb7\x19\xaf\xd7\x37\x37\x6d\x0f\xd6\x02\xf8\x60\x57\xe7\x88\x0d\x35\xc0\x14\xb4\x9a\xa3\x66\x0a\x95\x04\x71\x09\x83\x2f\xb0\x8a\x96\xdb\x00\xb0\xc1\x1e\x5c\x95\xbe\x2d\xa4\x4d\xaf\xb7\x13\xb0\x75\xd1\x0f\x2e\x4e\x53\x9e\x84\xb6\x35\x52\xd9\x64\xa4\xc2\x89\xd5\xdb\xf4\x2c\x0f\x8a\xfc\xd0\xbc\x56\x1a\x01\xfb\xf5\xe0\xa6\x67\x11\xbb\x4d\x3b\x04\x9a\x53\xf2\xfb\xa0\xc3\x6a\xaf\x6f\x9b\xd3\x64\x5a\x6f\xc9\xdd\x44\xd6\x2d\xbb\xab\xec\x80\x4d\xcc\x79\xbd\xff\x2b\xa9\x8e\x3e\x0f\x4c\x70\xc1\x82\x68\x6b\xbe\x65\x9f\x88\x3e\x61\xdb\x89\xf6\x4c\xd5\x5c\x7b\xab\x3b\xd0\x4a\xa1\x02\x8d\x4e\xb6\x77\x58\x56\xaf\xae\x64\x96\xde\xeb\x42\x45\x52\x67\x39\xe3\x5e\xcc\xd7\x4e\xcf\xa2\x93\xff\xb6\x7a\xcd\xe1\x9e\x85\x57\x58\x68\xb0\xa5\xa7\x73\x07\x58\x2f\xd6\x39\x44\xdf\x33\x8c\xd2\x09\x8e\x9c\x97\x3f\x01\x22\x73\x6a\x7a\x07\xcb\x79\xe2\x84\xb8\xd4\x4d\xc9\x1e\x83\xee\x0e\xfe\xcd\xad\xf3\xc5\x96\x28\xe3\x0a\x03\x3e\x4c\x61\x13\xdc\x3f\x9c\x3d\xb6\x3d\x2f\x41\x97\x40\xb8\xdb\x95\x22\x43\x02\x52\xed\x71\x0c\x63\x8a\x90\xe8\xcd\x59\x83\x31\xdd\xcf\x68\x52\x09\xf2\x1a\xe6\x30\xbd\x4e\x6e\x80\x39\xdd\x81\x18\xa8\x35\xd0\x43\x19\x14\x28\xee\x41\x77\x72\x11\x73\x7c\xfc\x6e\xf3\x26\xb4\xeb\xde\xd6\xc1\x11\xbd\x7a\x0c\xfa\xa3\x90\x36\x72\xd4\x77\xa0\x46\x73\x6d\xd7\x8d\xb5\xff\xb8\x5e\x53\xcc\xa6\x10\x1c\x43\x72\x4d\xaf\x78\x96\xe1\x2f\xd0\x2f\x68\x9f\xd0\xcb\x22\xb8\xcb\xf1\xe1\x3b\x16\xe2\xd7\x2f\x52\x91\x1f\xa4\xd4\xcf\x17\x91\xa6\xf0\x02\x1a\xba\x18\x1f\xdf\xfe\x84\x9f\xd5\x30\xc6\x2a\x79\xa3\xf4\x23\xe4\xcf\xd0\x3c\xbf\x5e\x71\xbc\xe8\x7c\x41\x6f\xfa\xd5\xc2\x01\x49\xce\x15\x4e\x5e\x87\xd2\x7d\x23\x6d\x6b\x68\x70\xe8\x55\x26\xeb\x37\xc6\x50\x16\xe4\xb0\xe7\x49\xaf\xa9\x7b\x0a\x5a\xc9\x00\x8a\x91\x8a\x70\xd2\x25\x1c\x77\x09\x47\x5d\xc2\x61\x87\x30\xe8\xbc\x77\xc7\xbb\x0a\xba\x33\x74\x21\x18\x8c\x37\xf5\x2a\x1e\xcc\xd3\xcd\xc1\xf6\x0d\x3d\xb4\xd8\x80\xd7\xb4\xd3\xc0\x4f\xd8\x5b\xea\x67\x1b\xa2\xc1\xf1\x60\xc4\x74\x79\xf7\xfa\x77\xfd\x4b\x28\xf1\x7f\xc8\x44\x08\xdb\x87\x83\x21\xf5\x0f\x5e\x7d\x68\x32\x72\x28\x0b\x72\xb1\xe4\x43\x6c\xe3\x38\xf6\x5f\x42\xdf\x5e\xbf\xce\x53\x1e\xa8\xf7\xd8\x71\x1a\xee\x87\x6d\xeb\xb7\x12\x49\x28\x57\x9e\x4c\xf0\xf6\x1a\xe6\xae\xf7\x7c\xb5\x05\x10\x1d\xd4\x3f\x30\xd4\xed\x94\x2d\x20\x57\xc9\x1b\xb9\x30\xf2\x2f\x75\x2b\xb8\xc3\x89\x43\x56\xdd\x95\xd8\x20\xb8\x9b\xd2\xf5\xef\x42\xcd\x5e\x07\xb9\xaa\xdd\xd5\x15\x6a\x24\xa0\xea\xda\xdd\xf1\x66\x70\x12\xbc\x49\xec\xd3\xc1\xa0\x96\xab\xf8\x70\xbb\xfc\xef\xe5\xdb\x5f\x6c\xea\xb3\x54\xbc\x5a\xe2\xfd\x4b\x0f\x3e\xfb\xdb\x05\xa3\x01\x9d\x56\x30\xc2\xa4\x2f\x90\xea\xc1\x2e\x91\x59\x7b\xec\x51\x00\x6f\x0b\x85\x08\xfa\xbb\x96\xdc\xfe\x33\x46\x47\xab\x80\xb5\x70\x8a\xb3\x0e\x47\xa3\x2d\xd4\xb8\xda\xe3\x0f\xad\xf7\x87\x83\x5d\xfa\x43\xa7\xb1\x35\xbe\x69\xe7\x35\x24\xbe\x9d\xde\x02\x04\x34\x8d\x97\xe2\x5f\xae\xd4\x9c\x0d\xcb\x1b\xbe\xe6\x3a\x3a\x6d\x2b\x8e\x76\x4d\xae\x9b\x57\x30\x4a\x04\xc5\xb3\xdd\x05\x76\x40\xaa\x5f\xb9\xcd\xa5\xcd\xc8\x2f\x7f\xdf\x86\xec\x8e\x7f\x9f\xf3\xef\x00\x00\x00\xff\xff\xc4\x2b\x35\x3c\xaf\x23\x00\x00")

func static_gui_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_static_gui_index_html,
		"static/gui/index.html",
	)
}

func static_gui_index_html() (*asset, error) {
	bytes, err := static_gui_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "static/gui/index.html", size: 9135, mode: os.FileMode(420), modTime: time.Unix(1445309174, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/gui/index.html": static_gui_index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"static": &_bintree_t{nil, map[string]*_bintree_t{
		"gui": &_bintree_t{nil, map[string]*_bintree_t{
			"index.html": &_bintree_t{static_gui_index_html, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

