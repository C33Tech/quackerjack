package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _static_gui_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x59\x7b\x73\xdb\x36\x12\xff\xdf\x9f\x02\x66\x2e\x25\x35\x16\x49\xc9\x76\x66\x1a\xbd\x32\xa9\x93\x4b\x7d\xcd\x25\xa9\xed\x74\x2e\xe3\xf3\x65\x20\x02\x92\x68\x53\x04\x03\x82\x7a\xc4\xf6\x77\xbf\x5d\x10\xa4\x48\x4a\x76\x9d\xce\xcd\x75\xa6\x16\xb9\xd8\x5d\xfc\xb0\xbb\xd8\x07\x33\xd8\x7f\xf3\xf1\xe4\xe2\xcb\xa7\xb7\x64\xa6\xe6\xd1\x68\x6f\x80\x3f\x24\xa2\xf1\x74\x68\xf1\xd8\x42\x02\xa7\x6c\xb4\x47\xc8\x40\x85\x2a\xe2\xa3\xdf\x33\x1a\xdc\x70\x79\x0d\x7f\x7b\xe4\x8b\xc8\x2e\xb2\x31\x27\x27\x62\x3e\xe7\xb1\x22\xaf\x63\x1a\xad\xbf\x73\x39\xf0\x73\xe6\x3d\x94\x9b\x73\x45\x49\x30\xa3\x32\xe5\x6a\x68\x65\x6a\xe2\xfe\x6c\x8d\xca\x85\x99\x52\x89\xcb\xbf\x65\xe1\x62\x68\xfd\xcb\xfd\xfc\xda\x05\x5d\x09\x55\xe1\x38\xe2\x16\x09\x44\xac\x40\xef\xd0\x3a\x7d\x3b\xe4\x6c\xca\x2b\x72\x31\x9d\xf3\xa1\xb5\x08\xf9\x32\x11\x52\x55\x58\x97\x21\x53\xb3\x21\xe3\x8b\x30\xe0\xae\x7e\x69\x93\x30\x0e\x55\x48\x23\x37\x0d\x68\xc4\x87\x5d\x2b\x07\x16\x85\xf1\x0d\x91\x3c\x1a\x5a\xa9\x5a\x47\x3c\x9d\x71\x0e\x8a\x66\x92\x4f\x86\x16\xc2\x4a\x7b\xbe\x3f\xa7\xab\x80\xc5\xde\x58\x08\x95\x2a\x49\x13\x7c\x09\xc4\xdc\x2f\x09\xfe\x91\x77\xe4\x1d\xfa\x41\x9a\x6e\x68\xde\x3c\x04\xae\x34\xcd\xe1\x6a\xe5\x44\xad\x13\xc0\xab\xf8\x4a\xf9\xc5\x0a\x21\xde\x38\x9c\xc6\xd9\x3c\x25\xb7\x64\x4e\xe5\x34\x8c\xdd\xb1\x50\x4a\xcc\x7b\xe4\xb0\x93\xac\xfa\x64\x02\x87\x72\xd3\xf0\x3b\xef\x91\x63\x4d\x40\x79\x97\x46\x20\xd5\x23\x01\x1c\x97\xcb\x3e\xb9\xaf\xab\x4a\x13\x1a\x7b\x8c\xa7\x01\x28\xad\xc8\x77\x8f\x51\x9e\x85\x69\x12\xd1\x75\x8f\x8c\x23\x11\xdc\x14\xb2\xcf\x22\x41\x59\x18\x4f\x41\xa2\x64\x88\x45\xcc\xfb\x44\xdb\xaf\x47\x7e\x7e\xf1\xbc\x6f\x10\xf6\xc8\x11\x20\x21\x34\x53\xa2\x86\xef\xe8\x41\x7c\x81\x88\x84\xec\x91\x67\x2f\x5f\xbe\x2c\x37\x94\x1c\xbd\xb6\xbd\x5f\x7d\xd9\x4b\xa4\x98\x4a\x9e\x56\xec\xa3\x44\x52\xec\x85\xbc\x03\x5f\x5b\x17\xc2\xd4\xcf\xe3\x74\x30\x16\x6c\xad\xcd\xce\xc2\x05\x09\x22\x9a\xa6\x43\x0b\x63\x83\x86\x31\x97\xc6\xec\x83\x7d\xd7\x25\xe7\x0a\xa2\x2c\x80\x38\x5a\x8c\xa9\x24\xae\x6b\x96\xe0\xbd\x10\x33\x4b\xf9\x8f\xcb\xf8\x84\x66\x91\x32\x2a\x1e\xd8\xc0\x9d\x44\x59\xc8\x4a\x9e\x3a\x97\x51\x84\x40\x4b\x28\x86\x6b\x9c\x81\xdb\x63\x13\x24\xf9\x8b\xd5\x10\x53\x62\x3a\x85\x38\x02\x6b\x46\x34\x49\x39\xb3\x08\xa3\x8a\x1a\x32\x42\xc8\xe9\x05\x19\xcc\x85\xd7\xed\x59\x2e\x6d\x11\x2a\x43\xea\xf2\x15\x04\x07\xe3\x6c\x68\x4d\x68\x84\xbc\x9a\x8a\xe8\xa5\x88\xca\xad\x6a\xd0\x30\x80\x41\xa8\x00\x93\x4a\x57\xc4\xd1\xda\x1a\x5d\xe4\x70\x40\x22\x9c\x82\x21\x45\x0c\xae\x00\xbe\x47\x44\x43\xd8\xc7\xd5\xea\xff\x5f\xac\x03\x3f\x37\x65\x8d\x46\x1b\x76\x1d\x4b\x30\x49\x71\xed\x9f\x59\xa3\x66\x4e\x3b\xd3\xb1\x38\xf0\x69\xc5\xa9\x3e\x78\xb5\xe1\xe3\x90\x95\xe6\x6b\x6c\x50\x78\xa6\x74\x5d\xdd\xf5\x13\x21\xe7\x0d\x09\x4d\x32\xcf\x11\x9f\x40\x52\x02\xf7\x80\x8f\x53\x4e\x65\x30\xb3\x08\x24\xc0\x99\x80\xfd\xc0\xc3\x4d\x5f\x55\xc2\x0d\xb5\xb8\x53\x29\xb2\xa4\xc1\x04\x6c\x61\x9c\x64\xaa\x92\x93\xac\x9a\x90\x09\x08\x8b\xc0\xd5\x0c\xf8\x4c\x44\x10\xaf\x43\xeb\x8f\x90\x71\x41\x4e\xdf\x58\x65\xee\x65\xcd\xdd\xeb\x76\xd9\x8e\xec\x34\x1b\xcf\xc3\xcd\x66\x63\x15\x13\xf8\x7f\x73\xb5\xce\xb2\x78\xa7\xcf\x7c\x84\x55\xa3\x64\x51\xc5\x66\x85\xad\xe0\xa7\x89\x08\x6e\x7a\x9d\x10\x85\x85\x20\x0d\x54\xb8\x00\x67\x40\x44\x94\xce\xff\x55\xcc\x39\xba\x7a\xe0\x47\xe1\xa8\x29\x58\xe3\xbc\x90\x70\xe1\x21\x67\xee\xe6\x2e\xd2\x49\x81\x3f\x8b\x9e\x84\xbe\x78\x94\xe1\x74\xb6\xe5\xda\x2a\x00\x2c\x4f\x50\x9d\xa6\xa1\x9a\x65\x63\x5d\x90\xe6\xe1\x0d\x9f\x44\xeb\x38\xf6\xbf\x6d\x2a\xb4\x35\x3a\x17\x99\x0c\x38\x01\x0f\xbc\x0b\xd5\xaf\xd9\x78\x17\xdc\x3a\xbc\xdc\x89\x68\x38\xdf\x03\x38\x9b\xf0\xdd\x9c\xa9\xca\xd2\x48\x7d\x9b\x44\xea\x83\xb0\xae\xb3\x95\x0b\x62\xea\x4c\x79\xb2\x33\x9e\xd7\x9d\x20\xbf\x6b\xa9\xe7\x79\xc4\xf9\x02\x27\x49\xdb\x24\x05\x57\x10\x31\x21\x6a\xc6\x61\x73\x2a\xe1\xfe\x48\xfa\x7d\xbd\xdf\xda\x91\x7f\x8b\x3a\x51\xbf\x59\x3b\x18\x30\x53\x90\xea\x8b\x0b\x05\x3b\x4c\x38\x23\x26\x1a\xcc\x4d\x2b\x58\x36\xa9\x73\x41\xa3\x8c\xc7\x62\x39\xb4\xba\x9d\x4e\x95\x06\xb5\x7e\x68\xd5\x29\x74\x65\xb8\x74\x71\x32\x2d\x09\x94\xe0\x4e\xe7\x79\x1d\x61\x23\x8f\x6c\x5e\xcd\x63\xdd\x7a\x79\x55\xdc\x14\xa0\x59\x57\x93\x17\x78\x2f\xbf\xea\x86\x0b\x93\xe0\xac\xbb\x61\x38\xd6\x0c\xd0\x7b\xc5\x31\x8f\x2a\x2c\xc7\x46\x35\xf2\x48\xe2\x6f\xde\x2a\x26\x93\x62\x49\x4c\x4f\xf1\x40\x3d\x83\xc8\x70\x57\xa9\x7b\x5c\x3f\x93\x4e\xce\x1b\x5c\xd8\xa1\x81\x82\xce\x8e\xec\x5c\x4d\xe3\xd8\xb0\x58\xa3\x3c\xc5\xfc\x81\x22\x4d\xfe\x5d\x39\xf7\x69\x38\x94\x50\x34\xfa\x5a\x84\xd8\x53\xa1\x5c\xa0\x54\x51\x04\xfe\x87\x68\x0a\x1c\x5f\x13\x2e\xbf\x32\xba\x7e\x2a\x9e\x02\x09\xf9\xc4\x25\x79\x43\xd7\x8f\x22\xaa\x86\xcf\x9f\xde\x94\x27\xde\x93\x2c\x08\x50\xee\x09\x17\xe4\x2f\x5e\x8f\xce\xf3\x7e\xcd\x66\xe5\x89\xcd\x54\xc1\x90\xe5\x47\xcf\x0b\x51\xfc\x48\xf4\xce\x99\x7b\x54\xf7\xd3\xec\x05\x78\x3e\x21\xbf\xf1\xf5\x52\x48\x06\x7e\x07\x42\x75\x5d\x51\x18\x4c\xb4\x23\x6f\x0c\x4b\x59\xcd\xf2\x25\xfd\xb7\xc8\x2a\x8d\xdb\xae\xd7\xb6\x5c\xf6\x18\xba\x97\x5b\xe8\x8a\xb6\xe4\x3c\x10\x60\xff\x2d\x7c\x01\x8d\x17\x34\xd5\x00\xe7\xeb\x13\x18\xba\xa0\xda\xe6\x13\x91\xa5\xd3\x0f\x99\x71\xac\x2d\x43\xeb\x08\x1c\x00\xa9\x20\xe7\x7f\x3c\x8c\x6a\x8f\x1b\xd0\x83\x34\x80\x43\x2a\x92\xca\x60\x33\x2f\xd1\x6b\xba\xf2\xa6\x42\x40\x6f\x48\x93\x30\xd5\xa5\x09\x69\x50\x72\xc6\xa9\x7f\xfd\x2d\xe3\x72\xed\x1f\x7a\x5d\xef\xc8\xbc\xe8\x59\xe9\x3a\xd5\xed\x9b\xd6\x37\x7a\x48\xf5\x53\x47\xb1\xeb\xe6\x24\xf6\x24\xed\xa0\xed\x1a\xe0\x46\x22\x63\x93\x08\xaa\x4d\x03\xb9\x36\x25\x68\xf2\xbb\x5e\xc7\xeb\x9a\xd7\x6d\xe5\x15\xed\x95\x81\xef\x9a\x82\x8d\x35\x55\xbb\x73\x92\xc5\x01\x76\xcc\x04\xfa\xb7\xcf\x67\xef\x3f\x51\x09\xfd\x14\x8c\x4a\x0e\xf6\x55\x2d\x72\xab\x0d\x2e\xb9\xca\x64\x4c\x18\x0f\x04\xe3\x9f\xcf\x4e\x71\x2c\x86\x11\x29\x56\x8e\x13\xf3\x25\x54\xce\xe9\xdb\x55\xe2\xd8\x97\xaf\xee\x7e\xba\xb2\xc9\x81\xee\xc9\xe0\xc7\x1e\xe2\x8b\xed\x5c\xfe\xe7\xa7\xfe\xd5\xc1\xab\x96\xf3\xd3\xdd\xb3\xbb\xfe\xdd\xdf\x5a\x76\xcb\xe3\x2b\x1e\x38\x30\xf7\xe9\x76\xdd\xcb\x9b\xc9\xd6\xdd\xdd\x65\xdb\xb2\xae\x5a\x97\xdd\x2b\x0f\x0a\x0c\x36\x7c\x8e\xff\xef\x03\x7f\xda\x26\xf6\xf3\xc3\x8e\xdd\x02\x8e\x38\x8b\x22\x00\x75\xbf\x57\x05\xcf\x16\x0e\x4e\x1a\x6d\x62\xba\xb7\x37\xf0\xd2\x00\xaf\x19\xc8\x2b\x3d\x91\x90\x5e\x8d\xb1\xbf\xad\x4f\xd2\x65\xde\x6b\x3b\xd7\xa9\x88\x0b\x55\xd7\xbf\x63\x94\x38\xba\x51\xd2\x5d\xab\xd5\xf2\x20\x8d\x68\x1e\xef\x93\x48\xd5\x29\xd3\xca\x36\x9c\x66\x7a\x04\xbe\x74\x26\x96\x4e\x73\xb5\x5a\x2e\x5b\x1e\xfa\xc7\xd9\x61\x64\xad\xde\x8c\x02\xff\xe4\x8a\xe2\x11\x3c\x5d\x9e\x2e\x50\xb2\xd5\xd4\x5a\xaf\xb1\x3f\xa8\xf7\x24\x17\xde\xad\xb9\x51\xbe\x7e\x50\xb5\x2e\x63\x45\x26\xdd\x46\xdd\x2c\x46\x46\xbb\x56\x65\xa4\x5e\x2f\xa6\x50\x72\xa0\xe2\x78\x4a\xfc\x3d\x5c\x71\xe6\x1c\x6e\xe9\xa9\x96\xfa\xbf\x62\x53\x5d\xf1\x51\x6b\x4d\xad\x57\x2d\x40\xa0\x97\x2a\x25\x1d\xbb\x56\x6c\xec\x36\xa9\x62\x3d\x11\x0b\x2e\xe9\x94\x03\x60\xfc\xfa\xd0\x6a\x8c\x3d\xb5\xff\xf0\x03\x8d\x73\x6b\xeb\xe4\x68\xf7\x1e\x53\x73\x60\x3f\xb7\xef\x1f\xd7\xa5\x8f\x6c\xef\xa8\x58\xf6\xc1\x9f\x28\x2e\x0e\x0d\x13\x0e\x71\x16\x50\x75\x57\x10\xe6\x39\x9a\xa2\x08\x15\x57\x81\x10\x5c\x5f\x93\x21\x49\xf0\x63\xda\x29\x98\x74\xd5\x82\xdb\xde\xed\x9b\xe5\xd2\x1f\x65\x6d\x02\xa3\x25\x09\x8f\x99\x63\x0f\x94\x1c\x0d\x14\x1b\xd9\x07\xeb\x03\xdb\x83\x5a\xc4\xcc\x6b\x6d\xab\xcb\xd5\xd5\x81\x9d\x2f\xfa\x20\x60\x1b\x47\xdf\xe7\x18\x71\x7b\x96\xc0\xfe\xb7\xf7\xfd\x87\x40\x9f\xc3\xb9\x42\x3c\x6b\x1d\x75\x0c\x52\xf5\x75\xd8\xea\xd2\xfa\x00\x59\xcb\xba\xea\x57\x18\x93\xdd\x8c\xc6\x62\xc8\x6b\x98\x59\x72\x19\x5f\xa1\x2d\xb6\x21\x62\xba\x19\x96\xdb\x47\x74\xcc\xa3\xb4\x47\x2e\xad\x0b\x2e\x25\x7e\x58\xdc\xb7\xda\xc4\x3a\xcf\x82\x9b\x14\x1f\x7e\xa1\x0c\x7f\x3e\x08\x45\xde\x09\xa1\x9f\xdf\xce\x34\x85\x67\x50\x43\x22\x7c\xfc\xf8\x1b\xfe\x2d\x96\xdf\xc3\x84\x42\x4e\x95\x7e\x04\x8f\x32\xf3\xfc\x7a\xc9\x71\x68\xd9\xb7\xae\xda\x05\x46\x40\x92\x72\x85\x9b\x97\xe1\x73\x5b\x09\x24\x0d\xad\x47\xca\xd3\xb5\x2b\x6b\x28\x0b\x72\x98\x66\x93\x4b\xcb\x7d\x01\x5a\x49\xa7\xd5\x26\x05\xe1\xb8\x49\x38\x6a\x12\x0e\x9b\x84\x6e\x83\xd0\x69\xbc\x37\xd7\x9b\x0a\x9a\x3b\x34\x21\x18\x8c\x57\xe5\x29\xee\xcd\xd3\xd5\xde\xe6\x0d\x3d\x14\xa8\x15\x38\x88\x89\x20\x43\x07\x7b\x50\x07\xdf\x46\x1c\x1f\x7f\x59\x9f\x32\xa7\xec\x5c\x5a\xb8\x72\x82\x1f\x76\xe1\x76\x59\x87\xcc\x32\xe1\x88\x2a\xe6\xeb\x5f\xa8\xd4\x6c\xa0\x09\x2b\xa2\x7e\x76\x40\x73\xcb\x83\x15\x53\x9b\x6e\xf5\x17\xdf\x73\xa8\x03\xef\x64\xc8\xde\xc3\x9c\x0a\xbe\xd0\xdf\xbe\xda\x50\xa4\x52\x48\x4c\x29\x4c\x7d\x3d\xa2\x64\x06\x94\x39\x0c\xb2\x38\xcc\xbe\x4e\x13\x1e\xa8\x33\xac\x93\x86\xfb\x7e\x53\xb0\x96\x61\xcc\xc4\xd2\x13\x31\x0e\xb3\xb0\x77\x51\xc0\x9c\x22\xe0\x11\x1d\x24\x44\x58\x6a\xd6\x77\x1b\xc8\x76\xe5\x0c\x18\xe7\xe7\x4a\xee\xe2\xc4\xa5\x82\x35\x9c\x38\x20\xb8\xb9\x4f\xc5\x35\xd7\x9f\x89\xaa\x35\x11\xb9\x8a\xbb\xd4\x14\xaa\x64\x87\x62\x0a\x6f\x79\x13\xca\x20\x8d\x38\x2f\x3a\x9d\x52\xae\xe0\x43\xd3\xff\xe3\xfc\xe3\x07\xc7\xf2\xa1\x91\x7b\xb5\xc0\x8e\xf2\x00\xfe\xb6\x37\x07\x46\x03\xb6\x6a\xf1\x0c\x9b\xee\x23\xd5\x83\x8b\x26\x64\x7d\xed\x41\x00\x1f\x33\x85\x08\xda\xdb\x96\xac\x5c\x86\x4d\x73\xa0\x77\xed\xd7\xd6\xef\x6b\xef\xf7\x7b\xdb\xf4\x9c\x76\x4f\x20\x11\x70\x44\x69\x2c\x5f\xcf\x51\x48\xfc\x38\xbe\x06\x77\xe0\xc1\x3d\x9d\x64\x4b\xce\x8a\x5d\x0d\x5f\x15\x65\xa3\x79\xc1\xd5\xa6\x41\x75\x0b\x03\x47\x9e\x41\xc1\x73\x9a\xc0\xf6\x48\xf1\x39\xdb\x34\x92\x03\x3f\xff\x90\x0d\x0d\x3e\xfe\xbb\xcc\x7f\x03\x00\x00\xff\xff\xa0\xa2\xf0\x05\xa7\x19\x00\x00")

func static_gui_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_static_gui_index_html,
		"static/gui/index.html",
	)
}

func static_gui_index_html() (*asset, error) {
	bytes, err := static_gui_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "static/gui/index.html", size: 6567, mode: os.FileMode(420), modTime: time.Unix(1427527005, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/gui/index.html": static_gui_index_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"static": &_bintree_t{nil, map[string]*_bintree_t{
		"gui": &_bintree_t{nil, map[string]*_bintree_t{
			"index.html": &_bintree_t{static_gui_index_html, map[string]*_bintree_t{
			}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

